<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snowgan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://snowgan.com/"/>
  <updated>2018-08-20T15:10:54.555Z</updated>
  <id>http://snowgan.com/</id>
  
  <author>
    <name>Snowgan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Create MongoDB Connection Pool</title>
    <link href="http://snowgan.com/2018/03/17/Create%20MongoDB%20Connection%20Pool/"/>
    <id>http://snowgan.com/2018/03/17/Create MongoDB Connection Pool/</id>
    <published>2018-03-17T14:00:00.000Z</published>
    <updated>2018-08-20T15:10:54.555Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB Node.js Driver support connection pool handling by default. It is responsible for initialing the pool and growing/shrinking pool connections when executing operations.</p>
<p>Using connection pool, we just spend some time on the db connection at first time and the following CRUD operations will use the single pool to connect to Mongodb.</p>
<p>And we can simply set the maximum pool size by pass option <code>{ poolSize: 20 }</code>.</p>
<p>To use the single pool instance, I need to refactor the original connection.js file which return a new connection promise everytime imported.</p>
<a id="more"></a>
<p>Original connection.js file:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://mongo-root:mongo-pass@localhost:27017/?authSource=admin'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> connection <span class="token operator">=</span> MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> connection<span class="token punctuation">;</span>
</code></pre>
<p>Singleton pattern can help to create a single pool instance. Below is the refactored connection.js file:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://mongo-root:mongo-pass@localhost:27017/?authSource=admin'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// single pool instance</span>
<span class="token keyword">let</span> Mongo_Client <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Mongo_Client <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Mongo_Client <span class="token operator">=</span> MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// config the maximum pool size</span>
      poolSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> Mongo_Client<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> connect<span class="token punctuation">;</span>
</code></pre>
<p>connection.js file exports a function which will return a new connection promise at first time, and then always return this promise. So the usage like below:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ConnectDB <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./db/connection.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ConnectDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>client <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span>dbName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// CRUD operation</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB Node.js Driver support connection pool handling by default. It is responsible for initialing the pool and growing/shrinking pool connections when executing operations.&lt;/p&gt;
&lt;p&gt;Using connection pool, we just spend some time on the db connection at first time and the following CRUD operations will use the single pool to connect to Mongodb.&lt;/p&gt;
&lt;p&gt;And we can simply set the maximum pool size by pass option &lt;code&gt;{ poolSize: 20 }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To use the single pool instance, I need to refactor the original connection.js file which return a new connection promise everytime imported.&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://snowgan.com/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://snowgan.com/categories/Database/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://snowgan.com/tags/MongoDB/"/>
    
      <category term="Connection" scheme="http://snowgan.com/tags/Connection/"/>
    
  </entry>
  
  <entry>
    <title>Using MongoDB Node.js Driver (1)</title>
    <link href="http://snowgan.com/2018/03/02/Using%20MongoDB%20Node.js%20Driver%201/"/>
    <id>http://snowgan.com/2018/03/02/Using MongoDB Node.js Driver 1/</id>
    <published>2018-03-02T14:00:00.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<p>MongoDB driver is an interface between MongoDB and application. We can use it in our application to manipulate MongoDB, such as connection, CRUD actions, BSON and JSON translation, etc.</p>
<p><a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">MongoDB Node.js Driver</a> is the official MongoDB driver used for nodejs application.</p>
<p>Another popular module is <a href="https://github.com/Automattic/mongoose" target="_blank" rel="noopener">mongoose</a> which you can choose to do the same work.</p>
<p>Please refer to <a href="http://mongodb.github.io/node-mongodb-native/3.0/" target="_blank" rel="noopener">official document</a> for more detail about MongoDB Node.js Driver.</p>
<a id="more"></a>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> i -S mongodb
</code></pre>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>Frist start mongod process and create a user for authentication.</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># start mongod process in background</span>
<span class="token comment" spellcheck="true"># simply use default setting </span>
$ mongod --auth --fork

<span class="token comment" spellcheck="true"># using mongo shell to create a root user</span>
$ mongo
<span class="token operator">></span> use admin
<span class="token operator">></span> db.createUser<span class="token punctuation">(</span><span class="token punctuation">{</span> user: <span class="token string">"mongo-root"</span>, pwd: <span class="token string">"mongo-pass"</span>, roles: <span class="token punctuation">[</span><span class="token punctuation">{</span> role: <span class="token string">"root"</span>, db: <span class="token string">"admin"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>Then in our project, create a connection.js file to connect MongoDB.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> MongoClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongodb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token string">'mongo-root'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> password <span class="token operator">=</span> <span class="token string">'mongo-pass'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> authDB <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`mongodb://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>password<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@localhost:27017/?authSource=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>authDB<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// the connect method will return a promise when no callback passed </span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> MongoClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> connection<span class="token punctuation">;</span>
</code></pre>
<h3 id="CRUD-Operations"><a href="#CRUD-Operations" class="headerlink" title="CRUD Operations"></a>CRUD Operations</h3><p>There are several common CRUD methods we used:</p>
<ul>
<li>create: <strong>insertOne</strong>(doc, options, callback), <strong>insertMany</strong>(docs, options, callback)</li>
<li>read: <strong>find</strong>(query, options), <strong>findOne</strong>(query, options, callback)</li>
<li>update: <strong>updateOne</strong>(filter, update, options, callback), <strong>updateMany</strong>(filter, update, options, callback)</li>
<li>delete: <strong>deleteOne</strong>(filter, options, callback), <strong>deleteMany</strong>(filter, options, callback)</li>
</ul>
<p>These CRUD methods will return Promise if no callback passed. And use Async/await syntax can help to free from callback hell.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import the connection.js</span>
<span class="token keyword">const</span> conn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./connection.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// conn is a Promise which resolved with a MongoClient instance</span>
conn<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connected to mongodb!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> db <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token string">'testDB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> col_test <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">collection</span><span class="token punctuation">(</span><span class="token string">'testCollection'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// col_test.find({}) - Find all documents in 'testCollection'</span>
    <span class="token comment" spellcheck="true">// project({ _id: 0, __v: 0 }) - Exclude the _id and __v field</span>
    <span class="token comment" spellcheck="true">// toArray() - Returns an array of documents</span>
    <span class="token keyword">const</span> docs <span class="token operator">=</span> <span class="token keyword">await</span> col_test<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// find the first document and returned without _id field</span>
    <span class="token keyword">const</span> first_doc <span class="token operator">=</span> <span class="token keyword">await</span> col_test<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> projection<span class="token punctuation">:</span> <span class="token punctuation">{</span> _id<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// update a single document which name is 'a' with value to 123, if no matched item, will insert a new document</span>
    <span class="token keyword">const</span> updated <span class="token operator">=</span> <span class="token keyword">await</span> col_test<span class="token punctuation">.</span><span class="token function">updateOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> $<span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> upsert<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DB Operation error!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// need to close the the connection with MongoDB server</span>
  client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Cannot connect mongodb!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MongoDB driver is an interface between MongoDB and application. We can use it in our application to manipulate MongoDB, such as connection, CRUD actions, BSON and JSON translation, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mongodb/node-mongodb-native&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB Node.js Driver&lt;/a&gt; is the official MongoDB driver used for nodejs application.&lt;/p&gt;
&lt;p&gt;Another popular module is &lt;a href=&quot;https://github.com/Automattic/mongoose&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mongoose&lt;/a&gt; which you can choose to do the same work.&lt;/p&gt;
&lt;p&gt;Please refer to &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official document&lt;/a&gt; for more detail about MongoDB Node.js Driver.&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://snowgan.com/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://snowgan.com/categories/Database/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://snowgan.com/tags/MongoDB/"/>
    
      <category term="Driver" scheme="http://snowgan.com/tags/Driver/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB Shell - Query Documents</title>
    <link href="http://snowgan.com/2018/01/19/MongoDB%20Shell%20-%20Query%20Documents/"/>
    <id>http://snowgan.com/2018/01/19/MongoDB Shell - Query Documents/</id>
    <published>2018-01-19T12:05:00.000Z</published>
    <updated>2018-06-27T14:55:23.399Z</updated>
    
    <content type="html"><![CDATA[<p><code>find(query, projection)</code></p>
<p>The find method is used to query documents in a collection and return a cursor to the selected documents.</p>
<h3 id="Select-all"><a href="#Select-all" class="headerlink" title="Select all"></a>Select all</h3><p>Pass an empty object as the query filter to select all documents in the collection.</p>
<pre class=" language-bash"><code class="language-bash">db.collectionName.find<span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># use .count() to show the size of selected documents</span>
db.collectionName.find<span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>.count<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># use .pretty() to print the result friendly</span>
db.collectionName.find<span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>.pretty<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<a id="more"></a>
<h3 id="Select-by-equality-condition"><a href="#Select-by-equality-condition" class="headerlink" title="Select by equality condition"></a>Select by equality condition</h3><p>Pass an object with field:value to select specific documents whose field equal to the value.</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># select by one or more condition</span>
db.countried.find<span class="token punctuation">(</span><span class="token punctuation">{</span> ccyChar: 36 <span class="token punctuation">}</span><span class="token punctuation">)</span>
db.countries.find<span class="token punctuation">(</span><span class="token punctuation">{</span> code: <span class="token string">"hk"</span>, ccy: <span class="token string">"HKD"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># select by nested field, do not forget the quotes to field</span>
db.products.find<span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">"prods.prodName"</span><span class="token keyword">:</span> <span class="token string">"iphonex"</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>
</code></pre>
<h4 id="Query-on-Arrays"><a href="#Query-on-Arrays" class="headerlink" title="Query on Arrays"></a>Query on Arrays</h4><ul>
<li><p>on the entire array: only searh the documents whose specific field <strong>strictly equal</strong> to the array</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># query condition:</span>
<span class="token comment" spellcheck="true"># genres is an array</span>
<span class="token comment" spellcheck="true"># genres only has two elements</span>
<span class="token comment" spellcheck="true"># and the first element equals to "Action", the second element equals to "Adventure"</span>
db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span> genres: <span class="token punctuation">[</span><span class="token string">"Action"</span>, <span class="token string">"Adventure"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>based on any element: search the documents whose specific field include the value </p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># query condition:</span>
<span class="token comment" spellcheck="true"># genres equals to "Action"</span>
<span class="token comment" spellcheck="true"># or genres is an array and include "Action"</span>
db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span> genres: <span class="token string">"Action"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
</li>
<li><p>based on a specific element: search the documents whose specific field satisfy the specific condition</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># query condition:</span>
<span class="token comment" spellcheck="true"># genres is an object and its property name equals to "0", property value equals to "Action"</span>
<span class="token comment" spellcheck="true"># or genres is an array and its first element equals to "Action"</span>
db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"genres.0"</span><span class="token keyword">:</span> <span class="token string">"Action"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
</li>
</ul>
<h3 id="Select-by-query-operators"><a href="#Select-by-query-operators" class="headerlink" title="Select by query operators"></a>Select by query operators</h3><p>Using the form<br><code>{ &lt;field&gt;: { &lt;operator&gt;: &lt;value&gt; }, ... }</code><br>or<br><code>{ &lt;operator&gt;: [{ &lt;field&gt;: &lt;value&gt; }, ...], ... }</code></p>
<p>comparison operators: $eq, $ne, $gt, $gte, $lt, $lte, $in, $nin</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># runtime >= 90 and &lt;= 120</span>
db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span> runtime: <span class="token punctuation">{</span> <span class="token variable">$gte</span><span class="token keyword">:</span> 90, <span class="token variable">$lte</span><span class="token keyword">:</span> 120 <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># genres is a string and equals to "Action" or "Short"</span>
<span class="token comment" spellcheck="true"># or genres is an array and include at least "Action" or "Short"</span>
db.movie.find<span class="token punctuation">(</span><span class="token punctuation">{</span> genres: <span class="token punctuation">{</span> <span class="token variable">$in</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"Action"</span>, <span class="token string">"Short"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;find(query, projection)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The find method is used to query documents in a collection and return a cursor to the selected documents.&lt;/p&gt;
&lt;h3 id=&quot;Select-all&quot;&gt;&lt;a href=&quot;#Select-all&quot; class=&quot;headerlink&quot; title=&quot;Select all&quot;&gt;&lt;/a&gt;Select all&lt;/h3&gt;&lt;p&gt;Pass an empty object as the query filter to select all documents in the collection.&lt;/p&gt;
&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;db.collectionName.find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# use .count() to show the size of selected documents&lt;/span&gt;
db.collectionName.find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.count&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# use .pretty() to print the result friendly&lt;/span&gt;
db.collectionName.find&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;.pretty&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Database" scheme="http://snowgan.com/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://snowgan.com/categories/Database/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://snowgan.com/tags/MongoDB/"/>
    
      <category term="Shell" scheme="http://snowgan.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Start Mongod</title>
    <link href="http://snowgan.com/2018/01/11/Start%20Mongod/"/>
    <id>http://snowgan.com/2018/01/11/Start Mongod/</id>
    <published>2018-01-11T14:00:00.000Z</published>
    <updated>2018-05-22T09:36:09.068Z</updated>
    
    <content type="html"><![CDATA[<p>To use MongoDB, we need to start the <strong>mongod</strong> deamon process. It handles data requests, manages data access, and performs background management operations.</p>
<p>We can simply start it use command <code>mongod</code>, and it will use the default setting to running mongod.</p>
<p>Or we can set custom configuration using command line options or configuration file(the default file is in /etc/mongod.conf).</p>
<a id="more"></a>
<p>The following setting will start mongod which:</p>
<ul>
<li>runs on port 27000</li>
<li>stores its data files in <code>/data/db/</code></li>
<li>listens to connections from the IP address <code>192.168.103.100</code> and <code>localhost</code></li>
<li>uses authentication</li>
</ul>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># use command line</span>
mongod --port 27000 --dbpath /data/db/ --logpath /data/log/mongod.log --bind_ip <span class="token string">"127.0.0.
1,192.168.103.100"</span> --auth

<span class="token comment" spellcheck="true"># use configuration file</span>
mongod --config /data/mongod.conf
<span class="token comment" spellcheck="true"># /data/mongod.conf content</span>

<span class="token comment" spellcheck="true"># Where and how to store data.</span>
storage:
  dbPath: /data/db
  journal:
    enabled: <span class="token boolean">true</span>

<span class="token comment" spellcheck="true"># where to write logging data.</span>
systemLog:
  destination: <span class="token function">file</span>
  logAppend: <span class="token boolean">true</span>
  path: /data/log/mongod.log

<span class="token comment" spellcheck="true"># network interfaces</span>
net:
  port: 27000
  bindIp: 127.0.0.1,192.168.103.100

<span class="token comment" spellcheck="true"># Enables authorization to control user’s access to database resources and operations</span>
security:
  authorization: enabled
</code></pre>
<p>Refer this <a href="https://docs.mongodb.com/manual/reference/program/mongod/#bin.mongod" target="_blank" rel="noopener">reference</a> for full command line options. </p>
<p>Refer this <a href="https://docs.mongodb.com/manual/reference/configuration-options/" target="_blank" rel="noopener">reference</a> for configuration file setting.</p>
<p>And then we can connect mongodb from localhost or 192.168.103.100 to the server <code>hostname:27000</code> on which mongod is running.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To use MongoDB, we need to start the &lt;strong&gt;mongod&lt;/strong&gt; deamon process. It handles data requests, manages data access, and performs background management operations.&lt;/p&gt;
&lt;p&gt;We can simply start it use command &lt;code&gt;mongod&lt;/code&gt;, and it will use the default setting to running mongod.&lt;/p&gt;
&lt;p&gt;Or we can set custom configuration using command line options or configuration file(the default file is in /etc/mongod.conf).&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://snowgan.com/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://snowgan.com/categories/Database/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://snowgan.com/tags/MongoDB/"/>
    
      <category term="mongod" scheme="http://snowgan.com/tags/mongod/"/>
    
  </entry>
  
  <entry>
    <title>Install MongoDB on Debian 9</title>
    <link href="http://snowgan.com/2018/01/10/Install%20MongoDB%20on%20Debian%209/"/>
    <id>http://snowgan.com/2018/01/10/Install MongoDB on Debian 9/</id>
    <published>2018-01-10T14:00:00.000Z</published>
    <updated>2018-05-15T14:36:02.203Z</updated>
    
    <content type="html"><![CDATA[<p>According to official document of current version(3.6), MongoDB only provides packages for 64-bit builds of Debian 7 and 8.</p>
<p>If we want to install MongoDB on Debian 9, need to install libssl1.0.0 first.</p>
<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Obtain the package of libssl1.0.0</span>
<span class="token function">wget</span> http://security.debian.org/debian-security/pool/updates/m
ain/o/openssl/libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb

<span class="token comment" spellcheck="true"># Install libssl1.0.0</span>
dpkg --install libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb
</code></pre>
<p>Then install MongoDB with official <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/" target="_blank" rel="noopener">guideline</a>.</p>
<a id="more"></a>
<pre class=" language-bash"><code class="language-bash">
<span class="token comment" spellcheck="true"># Step 1</span>
<span class="token function">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5

<span class="token comment" spellcheck="true"># Step 2</span>
<span class="token keyword">echo</span> <span class="token string">"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.6 main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/mongodb-org-3.6.list

<span class="token comment" spellcheck="true"># Step 3</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update

<span class="token comment" spellcheck="true"># Step 4</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y mongodb-org

<span class="token comment" spellcheck="true"># config file: /etc/mongod.conf </span>
<span class="token comment" spellcheck="true"># defualt log file: /var/log/mongodb/mongod.log</span>
<span class="token comment" spellcheck="true"># defualt db path: /var/lib/mongodb</span>
</code></pre>
<p>If encounter below error during installation,</p>
<p><code>failed to start the dirmngr &#39;/usr/bin/dirmngr&#39;: No such file or directory</code></p>
<p>install dirmngr and then re-install</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> dirmngr
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;According to official document of current version(3.6), MongoDB only provides packages for 64-bit builds of Debian 7 and 8.&lt;/p&gt;
&lt;p&gt;If we want to install MongoDB on Debian 9, need to install libssl1.0.0 first.&lt;/p&gt;
&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# Obtain the package of libssl1.0.0&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; http://security.debian.org/debian-security/pool/updates/m
ain/o/openssl/libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;# Install libssl1.0.0&lt;/span&gt;
dpkg --install libssl1.0.0_1.0.1t-1+deb8u8_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then install MongoDB with official &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;guideline&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://snowgan.com/categories/Database/"/>
    
      <category term="MongoDB" scheme="http://snowgan.com/categories/Database/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://snowgan.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>How dose the Execution Context work in JS</title>
    <link href="http://snowgan.com/2017/06/21/How%20dose%20the%20Execution%20Context%20work%20in%20JS/"/>
    <id>http://snowgan.com/2017/06/21/How dose the Execution Context work in JS/</id>
    <published>2017-06-21T14:10:00.000Z</published>
    <updated>2018-06-28T17:28:49.353Z</updated>
    
    <content type="html"><![CDATA[<p>The Execution Context(normally called ‘EC’) is an abstract concept which defines how to execute the javascript code. We can simply think of a execution context as the environment js code is executed in. And there can be numbers of EC in our program.</p>
<h3 id="How-to-create-a-EC"><a href="#How-to-create-a-EC" class="headerlink" title="How to create a EC"></a>How to create a EC</h3><p>We can create a new EC by below three ways:</p>
<ol>
<li><strong>Global EC</strong>: Will create a global EC at the begin of running application, and only one global EC in the whole program;</li>
<li><strong>Function EC</strong>: Will create a function EC each time one function is called. And enter to this new execution environment to run the function code. When the function return back, will ends this new EC and return to previoue EC which called the function.</li>
<li><strong>eval()</strong>: Using eval function also will create a EC, but it’s better to not use eval.</li>
</ol>
<a id="more"></a>
<h3 id="Execution-Stack"><a href="#Execution-Stack" class="headerlink" title="Execution Stack"></a>Execution Stack</h3><p>A <strong>execution stack</strong> will help to manage those ECs because js running in a browser is implemented as a single thread, only 1 EC will be the active EC in one time and other EC will be queued.<br>The bottom of the stack will always be the <strong>global EC</strong>, and the top is a <strong>function EC</strong> that current code is being executed in.</p>
<p>When one EC(caller) create a new EC(callee) during its running time, means a function is called, the caller suspends its own execution and callee’s EC will be pushed into execution stack. When the callee return back, will ends its EC and return to caller’s EC to resume the rest code.</p>
<p>For example:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
  <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The execution stack’s work flow like below:<br><img src="/image/ExecutionContext/001.gif" width="450" alt="Execution Stack" title="Execution Stack" style="margin-left: 0;"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Execution Context(normally called ‘EC’) is an abstract concept which defines how to execute the javascript code. We can simply think of a execution context as the environment js code is executed in. And there can be numbers of EC in our program.&lt;/p&gt;
&lt;h3 id=&quot;How-to-create-a-EC&quot;&gt;&lt;a href=&quot;#How-to-create-a-EC&quot; class=&quot;headerlink&quot; title=&quot;How to create a EC&quot;&gt;&lt;/a&gt;How to create a EC&lt;/h3&gt;&lt;p&gt;We can create a new EC by below three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Global EC&lt;/strong&gt;: Will create a global EC at the begin of running application, and only one global EC in the whole program;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function EC&lt;/strong&gt;: Will create a function EC each time one function is called. And enter to this new execution environment to run the function code. When the function return back, will ends this new EC and return to previoue EC which called the function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eval()&lt;/strong&gt;: Using eval function also will create a EC, but it’s better to not use eval.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Advanced" scheme="http://snowgan.com/tags/Advanced/"/>
    
      <category term="Execution Context" scheme="http://snowgan.com/tags/Execution-Context/"/>
    
  </entry>
  
  <entry>
    <title>Flexbox Table</title>
    <link href="http://snowgan.com/2017/03/07/Flexbox%20Table/"/>
    <id>http://snowgan.com/2017/03/07/Flexbox Table/</id>
    <published>2017-03-07T12:02:05.000Z</published>
    <updated>2018-01-28T14:46:25.278Z</updated>
    
    <content type="html"><![CDATA[<p>Using CSS flex layout to create a table to replace the standard table markup.</p>
<a id="more"></a>
<p>First create the initial html structure</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lisa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>Set CSS style to get 3x3 block</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.flex-table</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.flex-table-cell</span> </span><span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#888</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">flex-basis</span><span class="token punctuation">:</span> <span class="token number">33.33%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/FlexboxTable/001.png" width="450" alt="3x3 flexbox"></p>
<p>The next step is to size column according to how much content they contain. To do it, we need to make column as a set, which means set <code>flex-direction: column;</code></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack Zhang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lisa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Age<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flex-table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.flex-table</span> </span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>px<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.flex-table-cell</span> </span><span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">2</span>px solid <span class="token hexcode">#888</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/FlexboxTable/002.png" width="450" alt="Auto width flexbox"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Using CSS flex layout to create a table to replace the standard table markup.&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="CSS" scheme="http://snowgan.com/categories/Front-End/CSS/"/>
    
    
      <category term="CSS" scheme="http://snowgan.com/tags/CSS/"/>
    
      <category term="flex" scheme="http://snowgan.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>Flex Layout Basis</title>
    <link href="http://snowgan.com/2017/03/01/Flex%20Layout%20Basis/"/>
    <id>http://snowgan.com/2017/03/01/Flex Layout Basis/</id>
    <published>2017-02-28T16:20:34.000Z</published>
    <updated>2018-01-28T02:50:43.212Z</updated>
    
    <content type="html"><![CDATA[<p>We can create a flexbox container by setting the <code>display</code> property to <strong>flex</strong> or <strong>inline-flex</strong>, and the direct children of the container will become <strong>flex item</strong>.</p>
<p>There are several property can be set on the container element.</p>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p>Flexbox container have two axes: the main axis and the cross axis which indicate how the flex items place.</p>
<p><code>flex-direction</code> define the main axis direction.</p>
<p><code>flex-direction: row(defualt) | row-reverse | column | column-reverse;</code></p>
<p>The cross axis runs perpendicular to the main axis. The flex items will be placed according to the main axis direction.</p>
<a id="more"></a>
<h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p>By default, the flex items will not be wrapped and display in one line on the main axis.</p>
<p><code>flex-wrap</code> define the wrap behaviour of the flex items. We can set value to <strong>wrap</strong> to display multiple line.</p>
<p><code>flex-wrap: nowrap(default) | wrap | wrap-reverse;</code></p>
<h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p>The shorthand of <code>flex-direction</code> and <code>flex-wrap</code></p>
<p><code>flex-flow: flex-direction flex-wrap;</code></p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>The <code>justify-content</code> property define how to distribute the space between flex items on the main axis.</p>
<p>We can control the alignment of an individual flex item by setting <code></code></p>
<p><code>justify-content: flex-start | flex-end | center | space-between | space-around</code></p>
<p><img src="/image/FlexBasis/003.png" width="450" alt="shrink flexbox"></p>
<h3 id="align-items-amp-align-content"><a href="#align-items-amp-align-content" class="headerlink" title="align-items &amp; align-content"></a>align-items &amp; align-content</h3><p>The <code>align-items</code> property define the alignment behaviour of all the flex items on the cross axis.<br>When we wrap items to multiple line on the cross axis, the <code>align-content</code> can be available to control the distribution of space between the rows.</p>
<p><code>align-items: flex-start | flex-end | center | stretch | baseline</code></p>
<p><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch</code></p>
<p>The difference between align-items and align-content in <code>flex-start | flex-end | center</code> value:</p>
<p><img src="/image/FlexBasis/004.png" width="450" alt="shrink flexbox"></p>
<p>By default,</p>
<ul>
<li>The flex items do not stretch but can shrink on the main axis direction </li>
<li>The flex items will stretch to fill the size of the cross axis.</li>
</ul>
<p>Set CSS like below:</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.flex-container</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.flex-item</span></span><span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#f00</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/FlexBasis/001.png" width="450" alt="defualt flexbox"></p>
<p>All flex item’s width are fit for their content.</p>
<p><img src="/image/FlexBasis/002.png" width="450" alt="shrink flexbox"></p>
<p>All flex item’s width have been appropriately shunk to fill the size of the main axis.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We can create a flexbox container by setting the &lt;code&gt;display&lt;/code&gt; property to &lt;strong&gt;flex&lt;/strong&gt; or &lt;strong&gt;inline-flex&lt;/strong&gt;, and the direct children of the container will become &lt;strong&gt;flex item&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are several property can be set on the container element.&lt;/p&gt;
&lt;h3 id=&quot;flex-direction&quot;&gt;&lt;a href=&quot;#flex-direction&quot; class=&quot;headerlink&quot; title=&quot;flex-direction&quot;&gt;&lt;/a&gt;flex-direction&lt;/h3&gt;&lt;p&gt;Flexbox container have two axes: the main axis and the cross axis which indicate how the flex items place.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-direction&lt;/code&gt; define the main axis direction.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-direction: row(defualt) | row-reverse | column | column-reverse;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The cross axis runs perpendicular to the main axis. The flex items will be placed according to the main axis direction.&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="CSS" scheme="http://snowgan.com/categories/Front-End/CSS/"/>
    
    
      <category term="CSS" scheme="http://snowgan.com/tags/CSS/"/>
    
      <category term="flex" scheme="http://snowgan.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Events</title>
    <link href="http://snowgan.com/2017/02/10/JavaScript%20Events/"/>
    <id>http://snowgan.com/2017/02/10/JavaScript Events/</id>
    <published>2017-02-10T14:05:00.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<p>Events plays the core role in Javascript to allow user to interact with the web application.</p>
<p>The basic work flow is:</p>
<ul>
<li>We register an event handler for specific event</li>
<li>JS detects the event takes place</li>
<li>Execute the event handler</li>
</ul>
<a id="more"></a>
<h2 id="Register-Event-handler"><a href="#Register-Event-handler" class="headerlink" title="Register Event handler"></a>Register Event handler</h2><p>Each DOM element has the <strong>addEventListener</strong> method which allows you to add any number of handlers.</p>
<p>We can use <code>addEventListener(eventName, handler, isCapture)</code> to register a function as handler for specific event. The third parameter ‘isCapture’ indicating the handler triggered order (capture or bubble, which will mentioned later), default is false.</p>
<p>For example, register a function to a button’s click event:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// &lt;button id="test-btn">Test Event&lt;/button></span>

<span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsById</span><span class="token punctuation">(</span><span class="token string">'test-btn'</span><span class="token punctuation">)</span>

btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>So when user click this button, console will print text “button”.</p>
<p>The handler will receive an event object when specific event occurred.</p>
<p><code>event.currentTarget</code> refers to the element to which the event handler has been attached.<br><code>event.target</code> refers to the element on which the event occerred.</p>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>There are so many build-in types of events, and we can also create custom events with the <strong>Event</strong> constructor.</p>
<h3 id="Keyboard-Events"><a href="#Keyboard-Events" class="headerlink" title="Keyboard Events"></a>Keyboard Events</h3><p>The <strong>keydown</strong> event is fired when a key on the keyboard is pressed and the <strong>keyup</strong> event is fired when it is released. The keydown event will be fired repeatly when a key is pressed and held.</p>
<p>The <strong>keypress</strong> event is fired after keydown event when a key is pressed and the key will produce an input character, not the function keys such as Shift, Ctrl or Alt.</p>
<p>We can read the <strong>key</strong> property of the event object to figure out which key is being pressed or released. And <strong>ctrlKey</strong>, <strong>shiftKey</strong>, <strong>altKey</strong>, <strong>metaKey(command on Mac)</strong> will be set true when <code>Shift</code>, <code>Ctrl</code>, <code>Alt</code>, and <code>Meta</code> key event is fired.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// &lt;input type="text"></span>

<span class="token keyword">var</span> ipt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ipt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'keydown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'c'</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

ipt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'keypress'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// Only print 'keydown' if press function keys</span>
</code></pre>
<h3 id="Mouse-Events"><a href="#Mouse-Events" class="headerlink" title="Mouse Events"></a>Mouse Events</h3><table>
<thead>
<tr>
<th style="text-align:left">Event Name</th>
<th style="text-align:left">When fired</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">mousedown</td>
<td style="text-align:left">press the mouse button on the element</td>
</tr>
<tr>
<td style="text-align:left">mouseup</td>
<td style="text-align:left">release the mouse button on the element</td>
</tr>
<tr>
<td style="text-align:left">click</td>
<td style="text-align:left">click the mouse button, means one mousedown and one mouseup fired on the element</td>
</tr>
<tr>
<td style="text-align:left">dblclick</td>
<td style="text-align:left">click twice on the element</td>
</tr>
<tr>
<td style="text-align:left">mouseover</td>
<td style="text-align:left">mouse is moved onto the element or any its children</td>
</tr>
<tr>
<td style="text-align:left">mouseenter</td>
<td style="text-align:left">mouse is moved onto the element</td>
</tr>
<tr>
<td style="text-align:left">mouseout</td>
<td style="text-align:left">mouse is moved off the element or any its children</td>
</tr>
<tr>
<td style="text-align:left">mouseleave</td>
<td style="text-align:left">mouse is moved off the element</td>
</tr>
<tr>
<td style="text-align:left">mousemove</td>
<td style="text-align:left">mouse is moved over the element</td>
</tr>
</tbody>
</table>
<h4 id="mouseenter-amp-mouseleave-mouseover-amp-mouseout"><a href="#mouseenter-amp-mouseleave-mouseover-amp-mouseout" class="headerlink" title="mouseenter &amp; mouseleave, mouseover &amp; mouseout"></a>mouseenter &amp; mouseleave, mouseover &amp; mouseout</h4><p>mouseover and mouseout will also be fired when event occurred on children element, whereas mouseenter and mouseleave will not.</p>
<p><img src="/image/JavaScriptEvents/001.png" width="450" alt="mouse event"></p>
<p>We register the both four events on the outer element.</p>
<p>When mouse move from 1 to 2, <code>mouseover</code> and <code>mouseenter</code> will be fired;</p>
<p>When mouse move from 2 to 3, <code>mouseover</code> and <code>mouseout</code> will be fired(mouseover inner element, mouseout outer element);</p>
<p>When mouse move from 3 to 2, <code>mouseover</code> and <code>mouseout</code> will be fired(mouseover outer element, mouseout inner element);</p>
<p>When mouse move from 2 to 1, <code>mouseleave</code> and <code>mouseout</code> will be fired</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Events plays the core role in Javascript to allow user to interact with the web application.&lt;/p&gt;
&lt;p&gt;The basic work flow is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We register an event handler for specific event&lt;/li&gt;
&lt;li&gt;JS detects the event takes place&lt;/li&gt;
&lt;li&gt;Execute the event handler&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Event" scheme="http://snowgan.com/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>Webpack Learning</title>
    <link href="http://snowgan.com/2017/01/26/Webpack%20Learning/"/>
    <id>http://snowgan.com/2017/01/26/Webpack Learning/</id>
    <published>2017-01-26T15:31:00.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-use-webpack"><a href="#Why-use-webpack" class="headerlink" title="Why use webpack"></a>Why use webpack</h2><p>Why?</p>
<p>It’s the most popular build tool for javascript(According stars on github).</p>
<ul>
<li>Even though its configuration is too complex if we want a flexible build environment.</li>
<li>Even though it will bundle lots of wrapper code in final js file so it’s more overhead if our project is very simple.</li>
<li>Not to mention that there are many plugins to learn</li>
</ul>
<p>OK, that’s my hard points during my webpack trip.</p>
<p>But…</p>
<a id="more"></a>
<p>I think Webpack is a great module bundler that bundle all of your javascripts, css, images and fonts into one or more static files according to their dependency net.</p>
<h2 id="How-to-use-webpack"><a href="#How-to-use-webpack" class="headerlink" title="How to use webpack"></a>How to use webpack</h2><p>Webpack worked via a configuration object. It’s a js file named webpack.config.js by default.<br>Please refer to office ducuments for details : )</p>
<h3 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h3><p>Basicly we need to defined an entry file from which webpack start work.</p>
<p>Also an output destination to store generated bundle files.</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// entry: String | Array | Object</span>
  entry<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">,</span>
  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    path<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>
    filename<span class="token punctuation">:</span> <span class="token string">'build.js'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Webpack will start from main.js in src folder, and create dist folder after work to place the bundle file named build.js</span>
</code></pre>
<blockquote>
<p><strong>Tips</strong></p>
<p>We can use Node’s path module to avoid relative path issue.</p>
<p><em>entry: path.resolve(__dirname, ‘./src/main.js’)</em></p>
</blockquote>
<p><strong>Multiple entries</strong></p>
<p>When we use object value to define the entry, we can define multiple entries by use more than one property. The property key can be used by the variable ‘<strong>[name]</strong>‘</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    home<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/home.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token string">'about-me'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/about.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// path string will generate relative path in target folder</span>
    <span class="token string">'sub/child'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/child.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    path<span class="token punctuation">:</span> <span class="token string">'./dist'</span><span class="token punctuation">,</span>
    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// The bundled structure:</span>
<span class="token comment" spellcheck="true">// |- dist</span>
<span class="token comment" spellcheck="true">// |- - home.js</span>
<span class="token comment" spellcheck="true">// |- - about-me.js</span>
<span class="token comment" spellcheck="true">// |- - sub</span>
<span class="token comment" spellcheck="true">// |- - - child.js</span>
</code></pre>
<blockquote>
<p><strong>Tips</strong></p>
<p>String type entry also equal to object type entry with one property and the property key is main.</p>
<p>entry: path.resolve(__dirname, ‘./src/main.js’)</p>
<p>entry: {  main: path.resolve(__dirname, ‘./src/main.js’)  }</p>
</blockquote>
<h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>The entry just defined what files we are handling. The next important thing is how to preprocess the source files to make them work fine in module bundling.</p>
<p>For example:</p>
<p>If we write ES6 syntax that browsers cannot support currently, we need to use babel to transform them to ES5 syntax;</p>
<p>If we want to import css, image, font files like a normal js file, we also need a transformation to do it;</p>
<p>If we use sass, we need to compile it;<br>…</p>
<p>We can do all of these things using <strong>loaders</strong>.</p>
<p>First you need to install the loaders you want, like babel-loader, css-loader, sass-loader.</p>
<p>And then config how to use the loaders. We can define in webpack.config.js.</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>
        include<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        exclude<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/mock"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token comment" spellcheck="true">// these are matching conditions, each accepting a regular expression or string</span>
        <span class="token comment" spellcheck="true">// test and include have the same behavior, both must be matched</span>
        <span class="token comment" spellcheck="true">// exclude must not be matched (takes preferrence over test and include)</span>
        <span class="token comment" spellcheck="true">// Best practices:</span>
        <span class="token comment" spellcheck="true">// - Use RegExp only in test and for filename matching</span>
        <span class="token comment" spellcheck="true">// - Use arrays of absolute paths in include and exclude</span>
        <span class="token comment" spellcheck="true">// - Try to avoid exclude and prefer include</span>
        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'env'</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// This configuration means when use require()/import statement to solve a file end with '.js' in ./src folder</span>
<span class="token comment" spellcheck="true">// but not in ./src/mock, use the babel-loader to transform it before add it to the bundle</span>
</code></pre>
<p>There are some most used loaders:</p>
<ul>
<li><a href="https://github.com/webpack-contrib/style-loader" target="_blank" rel="noopener">style-loader</a> Adds CSS to the DOM by injecting a \&lt;style> tag</li>
<li><a href="https://github.com/webpack-contrib/css-loader" target="_blank" rel="noopener">css-loader</a> Interprets @import and url() like import/require() and will resolve them</li>
<li><a href="https://github.com/babel/babel-loader" target="_blank" rel="noopener">babel-loader</a> Compile js using babel</li>
<li><a href="https://github.com/webpack-contrib/file-loader" target="_blank" rel="noopener">file-loader</a> Emits the file into the output folder and returns its public URL</li>
<li><a href="https://github.com/webpack-contrib/url-loader" target="_blank" rel="noopener">url-loader</a> Works like the file-loader, but can return a DataURL if the file is smaller than a byte limit.</li>
</ul>
<p>We can apply multiple loaders. They are are executed in reverse order of definition in rules(bottom to top).</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>
      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token string">'style-loader'</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>
          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// Execute loaders like style(css(test.css))</span>
</code></pre>
<h3 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h3><p>Another important configuration is <strong>plugins</strong>.</p>
<p>It likes the task concept in Grunt or Gulp. And we can use lots of plugins like uglify or copy assests work to make the final bundle more optimized.</p>
<p>First we require the plugin we want to use.</p>
<p>Second create an instance of the plugin in the webpack’s plugins array.</p>
<p>For example, we want to use <code>DefinePlugin</code> which will define global constant in our application at compile phase</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// DefinePlugin is a build-in plugin and can be referred by webpack</span>
<span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">'process.env.NODE_ENV'</span><span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'production'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      TWO<span class="token punctuation">:</span> <span class="token string">'1+1'</span>
      <span class="token comment" spellcheck="true">// Global will add two constant</span>
      <span class="token comment" spellcheck="true">// process.env.NODE_ENV - the value is 'production'</span>
      <span class="token comment" spellcheck="true">// TWO - the value is 2</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// DefinePlugin does a direct text replacement</span>
<span class="token comment" spellcheck="true">// Define a string need to use: '"abc"' or JSON.stringify('abc')</span>
</code></pre>
<p>Please refer to official <a href="https://webpack.js.org/plugins/" target="_blank" rel="noopener">plugins list</a> to learning more.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-use-webpack&quot;&gt;&lt;a href=&quot;#Why-use-webpack&quot; class=&quot;headerlink&quot; title=&quot;Why use webpack&quot;&gt;&lt;/a&gt;Why use webpack&lt;/h2&gt;&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;It’s the most popular build tool for javascript(According stars on github).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though its configuration is too complex if we want a flexible build environment.&lt;/li&gt;
&lt;li&gt;Even though it will bundle lots of wrapper code in final js file so it’s more overhead if our project is very simple.&lt;/li&gt;
&lt;li&gt;Not to mention that there are many plugins to learn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK, that’s my hard points during my webpack trip.&lt;/p&gt;
&lt;p&gt;But…&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="Webpack" scheme="http://snowgan.com/categories/Front-End/Webpack/"/>
    
    
      <category term="Webpack" scheme="http://snowgan.com/tags/Webpack/"/>
    
      <category term="Tool" scheme="http://snowgan.com/tags/Tool/"/>
    
  </entry>
  
  <entry>
    <title>Prototype in JS</title>
    <link href="http://snowgan.com/2017/01/11/Prototype/"/>
    <id>http://snowgan.com/2017/01/11/Prototype/</id>
    <published>2017-01-11T12:01:00.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="object-prototype-and-prototype-chain"><a href="#object-prototype-and-prototype-chain" class="headerlink" title="object prototype and prototype chain"></a>object prototype and prototype chain</h3><p>Every object in Javascript has a prototype. And the prototype also is an object.</p>
<p>So we can get a prototype chain and the end of the chain links to <strong>Object.prototype</strong> whose prototype is null.</p>
<p>When trying to access a property of an object, will firstly find in object self. If cannot find it, will look up its prototype, and so on until find the property or the end of the prototype chain is reached.<br><a id="more"></a></p>
<h3 id="Constructor-and-Instance"><a href="#Constructor-and-Instance" class="headerlink" title="Constructor and Instance"></a>Constructor and Instance</h3><p>But what is “Object.prototype”? It’s quite different from the object prototype we mentioned above.</p>
<p>Object is a constructor. In Javascript, constructor is a normal function which is called with keyword ‘new’. Like below:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>The function <strong>Foo</strong> is a constructor. It can be used to create and initialize an object.</p>
<p>The variable <strong>foo</strong> is an instance object of the constructor Foo.</p>
<p>Every function in Javascript has a property named ‘prototype’. And this property ia an object.</p>
<p>So when the function is called as a constructor, the function property ‘prototype’ will be assigned as the prototype of the instance created by the constructor</p>
<h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h3><p>The prototype can be accessed by ‘__proto__‘ property, but it’s not a standard property and depends on browsers’ implement.</p>
<p>Examples:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Equal to: var obj = new Object({ a: 'a' })</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>

<span class="token comment" spellcheck="true">// Equal to: var obj = new Array(1, 2)</span>
<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><img src="/image/Prototype&Inheritance/001.png" width="450" alt="object_prototype" title="object_prototype"></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Living</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>alive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Living<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>growup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span><span class="token operator">=</span> time<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Living</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><img src="/image/Prototype&Inheritance/002.png" width="450" alt="object_prototype2" title="object_prototype2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;object-prototype-and-prototype-chain&quot;&gt;&lt;a href=&quot;#object-prototype-and-prototype-chain&quot; class=&quot;headerlink&quot; title=&quot;object prototype and prototype chain&quot;&gt;&lt;/a&gt;object prototype and prototype chain&lt;/h3&gt;&lt;p&gt;Every object in Javascript has a prototype. And the prototype also is an object.&lt;/p&gt;
&lt;p&gt;So we can get a prototype chain and the end of the chain links to &lt;strong&gt;Object.prototype&lt;/strong&gt; whose prototype is null.&lt;/p&gt;
&lt;p&gt;When trying to access a property of an object, will firstly find in object self. If cannot find it, will look up its prototype, and so on until find the property or the end of the prototype chain is reached.&lt;br&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Advanced" scheme="http://snowgan.com/tags/Advanced/"/>
    
      <category term="Prototype" scheme="http://snowgan.com/tags/Prototype/"/>
    
  </entry>
  
  <entry>
    <title>Loop in JS</title>
    <link href="http://snowgan.com/2017/01/05/Loop%20in%20JS/"/>
    <id>http://snowgan.com/2017/01/05/Loop in JS/</id>
    <published>2017-01-05T06:30:00.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Things<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Things<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The performance may be slow as the length property of Things will be accessed on each loop iteration.</p>
<p>A better way is to cache the length at initial phase, so we just access the length property once during the whole loop.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span> len <span class="token operator">=</span> Things<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Things<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<p>further micro-optimization:</p>
<p>cut the extra variable but reverse loop order</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> Things<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  Things<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre>
<a id="more"></a>
<h3 id="For-In-loop"><a href="#For-In-loop" class="headerlink" title="For-In loop"></a>For-In loop</h3><p>To iterates over enumerable properties of an object. Also include those enumerable properties on prototype chain.</p>
<p>This should not be used to iterate over an Array since the iterating order is not guaranteed.</p>
<p>The method <strong>hasOwnProperty()</strong> of Object can filter the properties on prototype chain.</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>fooProp <span class="token operator">=</span> <span class="token string">'foo\'s property'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>barProp <span class="token operator">=</span> <span class="token string">'bar\'s property'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bar<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>inst<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'=======Use hasOwnProperty()======='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> inst<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>inst<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>inst<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment" spellcheck="true">// Console result</span>
<span class="token comment" spellcheck="true">// barProp: bar's property</span>
<span class="token comment" spellcheck="true">// fooProp: foo's property</span>
<span class="token comment" spellcheck="true">// =======Use hasOwnProperty()=======</span>
<span class="token comment" spellcheck="true">// barProp: bar's property</span>
</code></pre>
<p>We can also directly call the hasOwnProperty on Object by <code>Object.prototype.hasOwnProperty.call(obj, prop)</code></p>
<p>This way will be better in case the hasOwnProperty method has been redefined</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;For-loop&quot;&gt;&lt;a href=&quot;#For-loop&quot; class=&quot;headerlink&quot; title=&quot;For loop&quot;&gt;&lt;/a&gt;For loop&lt;/h3&gt;&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Things&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Things&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The performance may be slow as the length property of Things will be accessed on each loop iteration.&lt;/p&gt;
&lt;p&gt;A better way is to cache the length at initial phase, so we just access the length property once during the whole loop.&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; len &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Things&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Things&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;further micro-optimization:&lt;/p&gt;
&lt;p&gt;cut the extra variable but reverse loop order&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Things&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  Things&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Grammer" scheme="http://snowgan.com/tags/Grammer/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="http://snowgan.com/2016/12/16/React%E7%AC%94%E8%AE%B0/"/>
    <id>http://snowgan.com/2016/12/16/React笔记/</id>
    <published>2016-12-16T14:00:00.000Z</published>
    <updated>2018-06-28T16:40:45.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-JSX语法"><a href="#1-JSX语法" class="headerlink" title="1. JSX语法"></a>1. JSX语法</h3><p>JSX是对JavaScript的拓展，采用HTML和JavaScript混写的语法，当遇到<strong>&lt;</strong>，JSX就当HTML解析，遇到<strong>{</strong>就当JavaScript解析</p>
<p>JSX的HTML写法与调用React.createElement(component, props, …children)函数的效果是一样的</p>
<a id="more"></a>
<pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 1 两种写法是一样的</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">shadowSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>
  Click Me
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyButton</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">// 2  </span>
React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  MyButton<span class="token punctuation">,</span>
  <span class="token punctuation">{</span>color<span class="token punctuation">:</span> <span class="token string">'blue'</span><span class="token punctuation">,</span> shadowSize<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string">'Click Me'</span>
<span class="token punctuation">)</span>
</code></pre>
<p>若要将一个对象当做props属性传递给组件，可使用{…props}语法</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 1 两种写法是一样的</span>
<span class="token keyword">function</span> <span class="token function">App1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">firstName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Ben<span class="token punctuation">"</span></span> <span class="token attr-name">lastName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hector<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 2</span>
<span class="token keyword">function</span> <span class="token function">App2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>firstName<span class="token punctuation">:</span> <span class="token string">'Ben'</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string">'Hector'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Greeting <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-React组件"><a href="#2-React组件" class="headerlink" title="2 React组件"></a>2 React组件</h3><h4 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h4><p>定义组件可采用函数声明形式，也可使用class继承React.Component</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 组件使用</span>
<span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
  element<span class="token punctuation">,</span>
  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>每个组件都有一个state和props对象，这两个对象的变化会触发组件重新渲染</p>
<p>初始化state对象使用getInitialState函数，用class方式则在constructor中初始化</p>
<p>不能直接更新state对象，要调用setState函数进行更新，将传入setState函数的参数合并到当前state对象中</p>
<h4 id="2-2-事件处理"><a href="#2-2-事件处理" class="headerlink" title="2.2 事件处理"></a>2.2 事件处理</h4><p>在JSX中调用事件函数时注意不要加引号</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyAction</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">handleFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// click事件发生时的处理逻辑</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleFunc<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>事件函数中的this陷阱：</p>
<p>如果直接调用事件函数，若不事先处理，事件函数中的this为undefined，而不是MyAction对象，所以要在组件初始化时矫正this指向</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyAction</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 将handleFunc中的this指向组件对象自身</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handleFunc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleFunc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">handleFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// click事件发生时的处理逻辑</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleFunc<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>若不想在初始化中做this矫正，也可在调用事件函数做下变动</p>
<pre class=" language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleFunc</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 或者更改事件函数声明方式</span>
handleFunc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-JSX语法&quot;&gt;&lt;a href=&quot;#1-JSX语法&quot; class=&quot;headerlink&quot; title=&quot;1. JSX语法&quot;&gt;&lt;/a&gt;1. JSX语法&lt;/h3&gt;&lt;p&gt;JSX是对JavaScript的拓展，采用HTML和JavaScript混写的语法，当遇到&lt;strong&gt;&amp;lt;&lt;/strong&gt;，JSX就当HTML解析，遇到&lt;strong&gt;{&lt;/strong&gt;就当JavaScript解析&lt;/p&gt;
&lt;p&gt;JSX的HTML写法与调用React.createElement(component, props, …children)函数的效果是一样的&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="React" scheme="http://snowgan.com/categories/Front-End/React/"/>
    
    
      <category term="Basic" scheme="http://snowgan.com/tags/Basic/"/>
    
      <category term="React" scheme="http://snowgan.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this笔记</title>
    <link href="http://snowgan.com/2016/12/09/JavaScript%E4%B8%AD%E7%9A%84this%E7%AC%94%E8%AE%B0/"/>
    <id>http://snowgan.com/2016/12/09/JavaScript中的this笔记/</id>
    <published>2016-12-08T16:35:21.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-全局作用域下的this"><a href="#1-全局作用域下的this" class="headerlink" title="1. 全局作用域下的this"></a>1. 全局作用域下的this</h2><p>全局作用域下this的值由其js执行的宿主环境（浏览器、nodejs等）决定</p>
<p>在web浏览器中运行时，this与window对象等价，即<code>this === window</code></p>
<h2 id="2-函数作用域下的this"><a href="#2-函数作用域下的this" class="headerlink" title="2. 函数作用域下的this"></a>2. 函数作用域下的this</h2><p>函数作用域下this的值由其函数被调用的方式决定</p>
<p>函数调用方式有四种：</p>
<ol>
<li>作为对象方法被调用；</li>
<li>作为对象构造器，使用关键字new的形式被调用；</li>
<li>使用Function.prototype.apply()或Function.prototype.call()方法显式绑定this值</li>
<li>不属于以上任何一种，则作为普通函数被调用；</li>
</ol>
<a id="more"></a>
<h3 id="2-1-对象方法调用"><a href="#2-1-对象方法调用" class="headerlink" title="2.1 对象方法调用"></a>2.1 对象方法调用</h3><p>当对象的某一属性是一个函数，且通过该对象属性名调用函数时则视为对象方法调用，函数执行时的this指向<strong>对象本身</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>
  func<span class="token punctuation">:</span> printName
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'Jenny'</span><span class="token punctuation">,</span>
  func<span class="token punctuation">:</span> printName
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token punctuation">{</span>
  child<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'Anna'</span><span class="token punctuation">,</span>
    func<span class="token punctuation">:</span> printName
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

obj1<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Mike'  函数执行时的this === obj1</span>
obj2<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Jenny'  函数执行时的this === obj2</span>
parent<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Anna'  函数执行时的this === parent.child</span>
</code></pre>
<h3 id="2-2-对象构造器调用"><a href="#2-2-对象构造器调用" class="headerlink" title="2.2 对象构造器调用"></a>2.2 对象构造器调用</h3><p>在函数调用表达式前加上关键字new就完成了构造器调用<code>new Func()</code>，这个函数也被称作构造器，和其他面向对象语言类似，构造器主要用于构造一个实例对象，并完成一些初始化工作</p>
<p>构造器就是一个普通的函数，也可以直接跟()进行正常调用，当加上new之后，JS引擎的执行流程会发生变化，具体如下：</p>
<ol>
<li>新建一个空对象，其原型指向构造器的prototype属性</li>
<li>将this指向这个空对象</li>
<li>执行函数体</li>
<li>返回这个创建的对象，作为构造器调用的返回值</li>
</ol>
<p>所以在对象构造器调用方式下，this指向的是<strong>该构造器所创建的实例对象</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通常作为构造器的函数名首字母大写(代码规范)</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lee'</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 得到一个Person对象{ name: 'Lee', func: Function }</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// p1.func() === p1;</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// p2.func() === p2;</span>
</code></pre>
<p>当构造器的函数体显式指定了返回值时，分两种情况：</p>
<ul>
<li>返回类型不是对象，构造器调用会忽略这条语句，返回创建的实例对象</li>
<li>返回类型是对象，构造器调用会执行这条语句，返回语句指定的对象</li>
</ul>
<h3 id="2-3-显式绑定"><a href="#2-3-显式绑定" class="headerlink" title="2.3 显式绑定"></a>2.3 显式绑定</h3><p>函数对象是Function构造器的一个实例，所以继承其原型上的方法，其中apply()和call()可以指定this和arguments的值</p>
<p><code>func.apply(thisVal[, argsArray])</code></p>
<p><code>func.call(thisVal[, args1, args2, ...])</code></p>
<p>两个方法的功能完全一样，区别在于apply传入由参数组成的数组或类数组对象，而call传入参数列表</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>
  func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj1<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Mike, 20'</span>
obj1<span class="token punctuation">.</span>func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Jenny'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Jenny, 18'</span>
obj1<span class="token punctuation">.</span>func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Anna'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Anna, 10'</span>
</code></pre>
<p>另外还有一个方法bind()，将返回一个新函数，新函数的this始终指向传入的第一个参数，无论其以何种方式被调用。除此之外，函数体执行逻辑和原函数一样</p>
<p><code>func.bind(thisVal[, args1, args2, ...])</code></p>
<p>传入bind的参数列表和传入新函数的参数会依次组成新函数的arguments变量</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'Mike'</span><span class="token punctuation">,</span>
  func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> newFunc <span class="token operator">=</span> obj1<span class="token punctuation">.</span>func<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Rose'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">newFunc</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Rose, 50'  [50， 25]</span>
</code></pre>
<h3 id="2-4-普通函数调用"><a href="#2-4-普通函数调用" class="headerlink" title="2.4 普通函数调用"></a>2.4 普通函数调用</h3><p>普通函数调用的表现形式主要有以下几种：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过函数名调用</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 通过指向一个函数对象的变量名来调用</span>
<span class="token keyword">var</span> funcVar <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">funcVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// IIFE调用</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在非严格模式下this指向<strong>全局作用域下的this</strong></p>
<p>在严格模式下this为<strong>undefined</strong></p>
<h3 id="2-5-箭头函数的this（ES6）"><a href="#2-5-箭头函数的this（ES6）" class="headerlink" title="2.5 箭头函数的this（ES6）"></a>2.5 箭头函数的this（ES6）</h3><p>箭头函数是ES6新引进的语法，它的this指向被创建时所在作用域的this值，这一特点在回调函数中特别有用</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>
  function btnClick() {
    console.log(this);
  }
  var ele = document.getElementById('btn');
  // 事件函数的this指向的是被绑定的DOM元素本身
  ele.addEventListener('click', btnClick);  

  // 箭头函数的this指向被创建时所在作用域的this
  // 此时箭头函数是定义在全局作用域里的，this指向window对象
  ele.addEventListener('click', () => {console.log(this)}); 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-全局作用域下的this&quot;&gt;&lt;a href=&quot;#1-全局作用域下的this&quot; class=&quot;headerlink&quot; title=&quot;1. 全局作用域下的this&quot;&gt;&lt;/a&gt;1. 全局作用域下的this&lt;/h2&gt;&lt;p&gt;全局作用域下this的值由其js执行的宿主环境（浏览器、nodejs等）决定&lt;/p&gt;
&lt;p&gt;在web浏览器中运行时，this与window对象等价，即&lt;code&gt;this === window&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-函数作用域下的this&quot;&gt;&lt;a href=&quot;#2-函数作用域下的this&quot; class=&quot;headerlink&quot; title=&quot;2. 函数作用域下的this&quot;&gt;&lt;/a&gt;2. 函数作用域下的this&lt;/h2&gt;&lt;p&gt;函数作用域下this的值由其函数被调用的方式决定&lt;/p&gt;
&lt;p&gt;函数调用方式有四种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作为对象方法被调用；&lt;/li&gt;
&lt;li&gt;作为对象构造器，使用关键字new的形式被调用；&lt;/li&gt;
&lt;li&gt;使用Function.prototype.apply()或Function.prototype.call()方法显式绑定this值&lt;/li&gt;
&lt;li&gt;不属于以上任何一种，则作为普通函数被调用；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="this" scheme="http://snowgan.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript函数笔记</title>
    <link href="http://snowgan.com/2016/12/05/JavaScript%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
    <id>http://snowgan.com/2016/12/05/JavaScript函数笔记/</id>
    <published>2016-12-04T16:32:58.000Z</published>
    <updated>2018-06-28T17:28:49.353Z</updated>
    
    <content type="html"><![CDATA[<p>和其他编程语言类似，JavaScript的函数也是用{}包裹的一个代码块，通过函数调用执行其方法体，能够进行值传参，并具有返回值，当没有显式声明返回值时，函数返回undefined。</p>
<h3 id="1-函数是第一类对象"><a href="#1-函数是第一类对象" class="headerlink" title="1. 函数是第一类对象"></a>1. 函数是第一类对象</h3><p>JS中的函数是一种对象类型，即是说可以当作对象来使用函数，相比其他对象类型，函数多了能被调用执行的功能。</p>
<p>函数和其他对象的使用对比：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 赋值声明</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 可添加属性</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Test'</span><span class="token punctuation">;</span>
func<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Test'</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 作为数组元素或对象属性值</span>
<span class="token keyword">var</span> testArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
testArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
testArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> testObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
testObj<span class="token punctuation">.</span>item1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
testObj<span class="token punctuation">.</span>item2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 作为函数参数</span>
<span class="token keyword">function</span> <span class="token function">testFunc1</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">testFunc1</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">testFunc1</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 作为函数返回值</span>
<span class="token keyword">function</span> <span class="token function">testFunc2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">testFunc3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<a id="more"></a>
<h3 id="2-函数声明和函数表达式"><a href="#2-函数声明和函数表达式" class="headerlink" title="2. 函数声明和函数表达式"></a>2. 函数声明和函数表达式</h3><p>函数声明和函数表达式是两种定义函数的方法，在使用上有些区别。</p>
<p>函数声明以关键字<strong>function</strong>开头，必须指定一个函数名，参数和返回值可选</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state1<span class="token punctuation">;</span>
  state2<span class="token punctuation">;</span>
  <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>当函数作为表达式的一部分时（赋值右侧、函数参数、函数返回值等），则为函数表达式。函数表达式中的函数名为可选，没有指定函数名的称为匿名函数。</p>
<p><strong>IIFE(Immediately Invoked Function Expression)</strong></p>
<p><code>(function() {})()</code></p>
<p>立即执行函数表达式是指定义函数后立即执行函数体的方法，在函数表达式后加上()，和普通的函数调用方式一样，可传入参数</p>
<p>IIFE必须用一对括号包裹，JS解析器会将括号内的语句解析为一个表达式，如果不加括号，则会解析为一个函数申明，因为函数申明必须指定函数名，所以语句会报错。以下写法也是可以的：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用一元操作符也可以达到同样的目的</span>
<span class="token operator">-</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 告诉解析器当前处理的是一个函数表达式而非函数声明</span>
<span class="token operator">!</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">~</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="3-函数参数"><a href="#3-函数参数" class="headerlink" title="3. 函数参数"></a>3. 函数参数</h3><p>JS中的函数参数都是传值参数，即函数调用时传入的参数都是原数据值的一个拷贝</p>
<p>当传入的数据是<strong>原生</strong>类型，则在函数内部对参数的任何修改都不会影响函数外的原数据</p>
<p>当传入的数据是<strong>对象</strong>类型，由于拷贝的是一个引用，则在函数内部对应的参数指向的是同一个对象，通过参数对该对象的任何修改会同时影响函数外的原数据</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>obj_argu<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_argu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Snow</span>
  obj_argu<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Rain'</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_argu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Rain</span>
  obj_argu <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Wind'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj_argu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Wind</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> Obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'Snow'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span>Obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Rain</span>
</code></pre>
<p><img src="/image/JavaScript函数笔记/001.png" alt="Function1"></p>
<p><strong>参数默认值</strong></p>
<p>若不给参数传值，则参数的默认值为<code>undefined</code></p>
<p>ES6中可以指定默认值，直接在函数声明参数时赋值<code>function func(a, b = 1) {}</code></p>
<p><strong>剩余参数</strong></p>
<p>加上…前缀代表没有对应形参而剩下的所有实参组成的数组</p>
<p>剩余参数只能定义在形参的最后一个</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// a: 3, b: 6, args: [7, 1, 4, 9, 2]</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [1, 2, 4, 7, 9]</span>
</code></pre>
<p><strong>参数解构</strong></p>
<p>ES6新特性，可以使用对象解构或数组解构的形式来实现参数解构</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 对象解构</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// You and me</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span> <span class="token string">'You'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token string">'me'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 数组解构</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// You and me</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'You'</span><span class="token punctuation">,</span> <span class="token string">'me'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="4-this和arguments"><a href="#4-this和arguments" class="headerlink" title="4. this和arguments"></a>4. this和arguments</h3><p>在调用函数时，一般会隐式传入两个对象：this和arguments</p>
<p><strong>this</strong></p>
<p>也被称作<strong>函数上下文</strong>，其值由函数被调用的方式决定。</p>
<p>this的情况复杂多变，其详解将单独成篇《<a href="/2016/12/09/JavaScript中的this笔记/">JavaScript中的this笔记</a>》</p>
<p><strong>arguments</strong></p>
<p>用于保存所有传入函数的参数，即使没有对应的形参。</p>
<p>具有length属性，可使用数组索引访问方式访问参数元素，但不能在其上调用其他数组方法，因为arguments是一个类数组结构，而不是真正的数组。</p>
<p>在非严格模式下，arguments中的参数元素是其对应形参变量的别名，改变任何一个都将会影响另一个</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>

  arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Byebye'</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Byebye'</span>

  a <span class="token operator">=</span> <span class="token string">'Welcome'</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'Welcome'</span>
<span class="token punctuation">}</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h3 id="5-箭头函数（ES6）"><a href="#5-箭头函数（ES6）" class="headerlink" title="5. 箭头函数（ES6）"></a>5. 箭头函数（ES6）</h3><p>是传统函数声明的简写形式，但不会绑定this，arguments，this继承它被创建时所在作用域的this，所以常用于创建回调函数</p>
<p>声明语法：<code>(param1, param2, …, paramN) =&gt; { statements }</code></p>
<p>其他声明规则：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当函数体只有一个返回语句时，可省略{}</span>
<span class="token comment" spellcheck="true">// 等于: (param1, param2, …, paramN) => { return expression; }</span>
<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> paramN<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> expression

<span class="token comment" spellcheck="true">// 只有一个参数时括号可省略</span>
<span class="token comment" spellcheck="true">// 等于: (singleParam) => { statements }</span>
singleParam <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 无参时使用空括号</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 返回对象字面量时用括号括起来</span>
params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>foo<span class="token punctuation">:</span> bar<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// ...rest表示其与参数</span>
<span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 可指定参数默认值</span>
<span class="token punctuation">(</span>param1 <span class="token operator">=</span> defaultValue1<span class="token punctuation">,</span> param2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> paramN <span class="token operator">=</span> defaultValueN<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 可使用参数解构</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> c<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6</span>
</code></pre>
<h3 id="6-bind方法"><a href="#6-bind方法" class="headerlink" title="6. bind方法"></a>6. bind方法</h3><p>每个函数对象都有一个内置的bind方法，调用该方法将生成一个新的函数对象，不管这个新的函数以何种方式调用，其this值由传入bind的参数决定。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和其他编程语言类似，JavaScript的函数也是用{}包裹的一个代码块，通过函数调用执行其方法体，能够进行值传参，并具有返回值，当没有显式声明返回值时，函数返回undefined。&lt;/p&gt;
&lt;h3 id=&quot;1-函数是第一类对象&quot;&gt;&lt;a href=&quot;#1-函数是第一类对象&quot; class=&quot;headerlink&quot; title=&quot;1. 函数是第一类对象&quot;&gt;&lt;/a&gt;1. 函数是第一类对象&lt;/h3&gt;&lt;p&gt;JS中的函数是一种对象类型，即是说可以当作对象来使用函数，相比其他对象类型，函数多了能被调用执行的功能。&lt;/p&gt;
&lt;p&gt;函数和其他对象的使用对比：&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 赋值声明&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; func &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 可添加属性&lt;/span&gt;
obj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
func&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 作为数组元素或对象属性值&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; testArr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
testArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
testArr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; testObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
testObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;item1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
testObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;item2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 作为函数参数&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testFunc1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;testFunc1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;testFunc1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 作为函数返回值&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testFunc2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;testFunc3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Function" scheme="http://snowgan.com/tags/Function/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组笔记</title>
    <link href="http://snowgan.com/2016/12/02/JavaScript%E6%95%B0%E7%BB%84%E7%AC%94%E8%AE%B0/"/>
    <id>http://snowgan.com/2016/12/02/JavaScript数组笔记/</id>
    <published>2016-12-02T08:02:45.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<p>数组的每一项可以保存任意类型的数据</p>
<h3 id="1-数组创建"><a href="#1-数组创建" class="headerlink" title="1. 数组创建"></a>1. 数组创建</h3><p>创建数组有两种方式（多使用第二种方式）：</p>
<ol>
<li><p>使用Array构造函数</p>
<p><code>var arr1 = new Array( &quot;hello&quot;, &quot;world&quot; );</code></p>
</li>
<li><p>使用字面量形式[]</p>
<p><code>var arr2 = [ &quot;hello&quot;, &quot;world&quot; ];</code></p>
</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数组类型判断（若Array的toString方法被重写，则不适用）：</span>
<span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="2-常用属性和方法"><a href="#2-常用属性和方法" class="headerlink" title="2. 常用属性和方法"></a>2. 常用属性和方法</h3><h4 id="2-1-length"><a href="#2-1-length" class="headerlink" title="2.1 .length"></a>2.1 .length</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Length of an array</span>
<span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"!"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>
<span class="token comment" spellcheck="true">// Empty array</span>
myArray<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myArray => []</span>
<span class="token comment" spellcheck="true">// truncate array</span>
myArray<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myArray => [ "hello", "world"]</span>
myArray<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// myArray => [ "hello", "world", "!", undefined]</span>
</code></pre>
<h4 id="2-2-concat"><a href="#2-2-concat" class="headerlink" title="2.2 .concat()"></a>2.2 .concat()</h4><p>连接两个数组</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> myOtherArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wholeArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> myOtherArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 2, 3, 4, 5, 6, 7 ]</span>
</code></pre>
<a id="more"></a>
<h4 id="2-3-join"><a href="#2-3-join" class="headerlink" title="2.3 .join()"></a>2.3 .join()</h4><p>连接数组内的各个元素，可指定分隔符</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Joining elements</span>
<span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> <span class="token string">"!"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// The default separator is a comma.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello,world,!"</span>
<span class="token comment" spellcheck="true">// Any string can be used as separator...</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">" "</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello world !";</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">"!!"</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello!!world!!!";</span>
<span class="token comment" spellcheck="true">// ...including an empty one.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "helloworld!"</span>
</code></pre>
<h4 id="2-4-push-amp-pop"><a href="#2-4-push-amp-pop" class="headerlink" title="2.4 .push() &amp; .pop()"></a>2.4 .push() &amp; .pop()</h4><p>在数组尾部添加或删除元素</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Pushing and popping</span>
<span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0 , 2 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0 , 2 , 7 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0 , 2 ]</span>
</code></pre>
<h4 id="2-5-unshift-amp-shift"><a href="#2-5-unshift-amp-shift" class="headerlink" title="2.5 .unshift() &amp; .shift()"></a>2.5 .unshift() &amp; .shift()</h4><p>在数组头部添加或删除元素</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 2 , 0 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 7 , 2 , 0 ]</span>
myArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 2, 0 ]</span>
</code></pre>
<h4 id="2-6-reverse"><a href="#2-6-reverse" class="headerlink" title="2.6 .reverse()"></a>2.6 .reverse()</h4><p>使数组元素倒序</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"world"</span> <span class="token punctuation">,</span> <span class="token string">"hello"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ "hello", "world" ]</span>
</code></pre>
<h4 id="2-7-indexOf-amp-lastIndexOf"><a href="#2-7-indexOf-amp-lastIndexOf" class="headerlink" title="2.7 .indexOf() &amp; .lastIndexOf()"></a>2.7 .indexOf() &amp; .lastIndexOf()</h4><p>搜索指定值在数组中的位置，没找到返回-1. lastIndexOf()从后往前搜索</p>
<p>传入两个参数：</p>
<p>value: 要搜索的值</p>
<p>index: 开始搜索位置</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"world"</span> <span class="token punctuation">,</span> <span class="token string">"hello"</span> <span class="token punctuation">,</span> <span class="token string">"!"</span> <span class="token punctuation">,</span> <span class="token string">"world"</span> <span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"!"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//-1</span>
</code></pre>
<h4 id="2-8-slice"><a href="#2-8-slice" class="headerlink" title="2.8 .slice()"></a>2.8 .slice()</h4><p><code>slice([begin[, end]])</code></p>
<p>返回一个从begin开始到end结束但不包括end位置的新数组，begin和end可为负数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 1, 2, 3, 4, 5, 6, 7, 8 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> newArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 4, 5, 6, 7, 8 ]</span>
newArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> newArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 6, 7, 8 ]</span>
newArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> newArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 3, 4, 5 ]</span>
newArray <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> newArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>
</code></pre>
<h4 id="2-9-splice"><a href="#2-9-splice" class="headerlink" title="2.9 .splice()"></a>2.9 .splice()</h4><p><code>myArray.splice( index, length, values, ... )</code></p>
<p>index: 开始位置</p>
<p>length: 删除元素个数</p>
<p>values: 添加元素，插入到index指定的位置</p>
<p>该函数返回被删除的元素</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> res <span class="token operator">=</span> myArray<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> myArray <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 0, 1, 2, 3, 4, 5 ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> res <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [7, 8]</span>
</code></pre>
<h4 id="2-10-sort"><a href="#2-10-sort" class="headerlink" title="2.10 .sort()"></a>2.10 .sort()</h4><p>数组排序，默认升序排列。可传入一个函数参数，该函数定义了排序规则</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1, 3, 4, 6</span>

<span class="token comment" spellcheck="true">// Sorting with comparing function.</span>
<span class="token keyword">function</span> <span class="token function">descending</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果a应排在b前，则返回负数，反之则返回正数</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span> descending <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [ 6, 4, 3, 1 ]</span>
</code></pre>
<h4 id="2-11-迭代方法"><a href="#2-11-迭代方法" class="headerlink" title="2.11 迭代方法"></a>2.11 迭代方法</h4><p><code>.every(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数，如果该函数对每一项都返回true，则every()返回true</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> element <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// false</span>
<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><code>.some(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数，如果该函数对任何一项返回true，则some()返回true</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isBiggerThan10</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isBiggerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>
<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span>isBiggerThan10<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<p><code>.forEach(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">logArrayElements</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a['</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">'] = '</span> <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// Notice that index 2 is skipped since there is no item at</span>
<span class="token comment" spellcheck="true">// that position in the array.</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>logArrayElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// logs:</span>
<span class="token comment" spellcheck="true">// a[0] = 2</span>
<span class="token comment" spellcheck="true">// a[1] = 5</span>
<span class="token comment" spellcheck="true">// a[3] = 9</span>

<span class="token comment" spellcheck="true">// 如果在迭代过程中改变了数组，将影响接下来的迭代数据</span>
<span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
words<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>word <span class="token operator">===</span> <span class="token string">"two"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    words<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// one</span>
<span class="token comment" spellcheck="true">// two</span>
<span class="token comment" spellcheck="true">// four</span>
</code></pre>
<p><code>.map(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数, 返回每次函数调用的结果所组成的新数组</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> doubles <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// doubles is now [2, 8, 18]. numbers is still [1, 4, 9]</span>
</code></pre>
<p><code>.filter(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数, 返回函数调用返回true的项所组成的新函数</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isBigEnough</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> filtered <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isBigEnough<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// filtered is [12, 130, 44]</span>
</code></pre>
<p><code>.reduce(function(previousValue, currentValue, currentIndex, array) {}[, initValue])</code></p>
<p>对数组中的每一项运行指定函数，previousValue是上一次调用函数的结果，reduce()返回最后一次调用函数的结果</p>
<p>reduce在数组为空且没有定义initialValue时，会抛出错误</p>
<p>reduce在数组只有一个元素且没有定义initialValue时，将不会执行指定函数，直接返回该元素</p>
<p>reduce在数组为空且定义initialValue时，将不会执行指定函数，直接返回initialValue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> flattened <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// flattened is [0, 1, 2, 3, 4, 5]</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的每一项可以保存任意类型的数据&lt;/p&gt;
&lt;h3 id=&quot;1-数组创建&quot;&gt;&lt;a href=&quot;#1-数组创建&quot; class=&quot;headerlink&quot; title=&quot;1. 数组创建&quot;&gt;&lt;/a&gt;1. 数组创建&lt;/h3&gt;&lt;p&gt;创建数组有两种方式（多使用第二种方式）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用Array构造函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var arr1 = new Array( &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; );&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用字面量形式[]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var arr2 = [ &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; ];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 数组类型判断（若Array的toString方法被重写，则不适用）：&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toString&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[object Array]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;2-常用属性和方法&quot;&gt;&lt;a href=&quot;#2-常用属性和方法&quot; class=&quot;headerlink&quot; title=&quot;2. 常用属性和方法&quot;&gt;&lt;/a&gt;2. 常用属性和方法&lt;/h3&gt;&lt;h4 id=&quot;2-1-length&quot;&gt;&lt;a href=&quot;#2-1-length&quot; class=&quot;headerlink&quot; title=&quot;2.1 .length&quot;&gt;&lt;/a&gt;2.1 .length&lt;/h4&gt;&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Length of an array&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;!&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// 3&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// Empty array&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; myArray &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// myArray =&gt; []&lt;/span&gt;
&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// truncate array&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; myArray &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// myArray =&gt; [ &quot;hello&quot;, &quot;world&quot;]&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; myArray &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// myArray =&gt; [ &quot;hello&quot;, &quot;world&quot;, &quot;!&quot;, undefined]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;2-2-concat&quot;&gt;&lt;a href=&quot;#2-2-concat&quot; class=&quot;headerlink&quot; title=&quot;2.2 .concat()&quot;&gt;&lt;/a&gt;2.2 .concat()&lt;/h4&gt;&lt;p&gt;连接两个数组&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myOtherArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; wholeArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; myOtherArray &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;// [ 2, 3, 4, 5, 6, 7 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Array" scheme="http://snowgan.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>CSS模糊效果实践</title>
    <link href="http://snowgan.com/2016/12/01/CSS%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://snowgan.com/2016/12/01/CSS模糊效果实践/</id>
    <published>2016-12-01T02:47:51.000Z</published>
    <updated>2016-12-19T07:48:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bgimg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>模糊效果测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- css --></span>
.bgimg{
    height: 500px;
    background-image: url(bgpic6.jpg);
    background-size: contain;
    background-repeat: no-repeat;
    overflow: hidden;
}
.blur {
    width: 200px;
    height: 200px;
    margin: 150px 250px;
    background-color: hsla(0,0%,100%,.4);
}
</code></pre>
<p><img src="/image/CSS模糊效果实践/001.png" alt="blur_test1"></p>
<p>这里使用hsla颜色值加透明度显示一个文字层的效果，但是并没有达到模糊的效果</p>
<a id="more"></a>
<h3 id="加入遮罩层"><a href="#加入遮罩层" class="headerlink" title="加入遮罩层"></a>加入遮罩层</h3><p>需要在文字层下方新建一个模糊层遮罩，可以在.blur元素里添加一个子元素，也可以直接添加一个伪元素</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.blur</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">150</span>px <span class="token number">250</span>px<span class="token punctuation">;</span>
    <span class="token property">positon</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.blur</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/CSS模糊效果实践/002.png" alt="blur_test2"></p>
<p>如果在.blur:after上不设置z-index，after伪元素会遮住文字</p>
<p>z-index为负值时，会将该元素设置在第一个有定位(position非static)且设置了z-index值得父元素上，这里我们设置.blur元素为<code>position: relative; z-index: 0</code>，所以.blur:after伪元素会位于.blur元素上，text文字下，且会遮盖设置在.blur元素上的任何背景</p>
<p>如果换在.bgimg元素上设置，则.blur:after伪元素位于.bgimg元素上，.blur元素下，这时如果我们给.blur元素设置一个背景色，会发现.blur:after伪元素被完全遮盖了</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bgimg</span> </span><span class="token punctuation">{</span>
    <span class="token property">positon</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.blur</span> </span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* positon: relative; */</span>
    <span class="token comment" spellcheck="true">/* z-index: 0; */</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> wheat<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/CSS模糊效果实践/003.png" alt="blur_test3"></p>
<h3 id="遮罩层添加背景图"><a href="#遮罩层添加背景图" class="headerlink" title="遮罩层添加背景图"></a>遮罩层添加背景图</h3><p>使用<strong>background-attachment</strong>属性的fixed值，使背景图层和遮罩层的图片完全重合。background-attachment用来设置背景图的位置是固定在视图窗口上，还是跟随元素一起滚动</p>
<p>这里设置了一个border值来突出.blur元素</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bgimg</span></span><span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(bgpic6.jpg)</span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.blur</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url(bgpic6.jpg)</span><span class="token punctuation">;</span>
    <span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>
    <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>
    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/CSS模糊效果实践/004.png" alt="blur_test4"></p>
<h3 id="使用filter-blur-实现模糊效果"><a href="#使用filter-blur-实现模糊效果" class="headerlink" title="使用filter: blur()实现模糊效果"></a>使用filter: blur()实现模糊效果</h3><p><code>filter: blur(5px)</code>指定一个模糊半径，可以非常方便地实现模糊效果。但只能在高级浏览器下使用，IE不兼容</p>
<p>该模糊效果会在边缘弱化，所以设置遮罩层的margin为负值使其size大于.blur元素，再在.blur元素上设置<code>overflow: hidden</code>切掉超出部分，可得到一个理想的模糊效果</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.blur</span> </span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.blur</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="/image/CSS模糊效果实践/005.png" alt="blur_test5"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- html --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bgimg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blur<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>模糊效果测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- css --></span>
.bgimg{
    height: 500px;
    background-image: url(bgpic6.jpg);
    background-size: contain;
    background-repeat: no-repeat;
    background-attachment: fixed;
    overflow: hidden;
}
.blur {
    width: 200px;
    height: 200px;
    margin: 150px 250px;
    position: relative;
    z-index: 2;
    overflow: hidden;
}
.blur:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: -1;
    background-image: url(bgpic6.jpg);
    background-size: contain;
    background-repeat: no-repeat;
    background-attachment: fixed;
    filter: blur(5px);
    margin: -10px;
}
</code></pre>
<hr>
<p>参考文章：</p>
<ol>
<li><a href="http://www.w3cplus.com/css3/css-secrets/frosted-glass-effect.html" target="_blank" rel="noopener">CSS秘密花园:磨砂玻璃效果</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2012/03/zindex%E8%B4%9F%E5%80%BC-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%96%87%E5%AD%97%E9%9A%90%E8%97%8F/" target="_blank" rel="noopener">你到了第几层？图片式标题、按钮与隐藏文本</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始状态&quot;&gt;&lt;a href=&quot;#初始状态&quot; class=&quot;headerlink&quot; title=&quot;初始状态&quot;&gt;&lt;/a&gt;初始状态&lt;/h3&gt;&lt;pre class=&quot; language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;&amp;lt;!-- html --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bgimg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blur&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;模糊效果测试&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot; spellcheck=&quot;true&quot;&gt;&amp;lt;!-- css --&gt;&lt;/span&gt;
.bgimg{
    height: 500px;
    background-image: url(bgpic6.jpg);
    background-size: contain;
    background-repeat: no-repeat;
    overflow: hidden;
}
.blur {
    width: 200px;
    height: 200px;
    margin: 150px 250px;
    background-color: hsla(0,0%,100%,.4);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/image/CSS模糊效果实践/001.png&quot; alt=&quot;blur_test1&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里使用hsla颜色值加透明度显示一个文字层的效果，但是并没有达到模糊的效果&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="CSS" scheme="http://snowgan.com/categories/Front-End/CSS/"/>
    
    
      <category term="CSS" scheme="http://snowgan.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基本类型</title>
    <link href="http://snowgan.com/2016/11/21/JavaScript%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://snowgan.com/2016/11/21/JavaScript基本类型/</id>
    <published>2016-11-21T14:25:13.000Z</published>
    <updated>2018-06-28T17:28:49.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-变量和常量"><a href="#1-变量和常量" class="headerlink" title="1. 变量和常量"></a>1. 变量和常量</h3><p>JavaScript中的数据存储类型分为变量和常量（常量是es6新引入的），常量在声明初始化后就不能改变其值，变量则可任意改变。代码中尽可能使用常量以避免意外改变了值，除非业务逻辑明确需要一个变量</p>
<p>变量声明关键字： <strong>var</strong>, <strong>let(es6块级作用域申明)</strong></p>
<p>常量声明关键字： <strong>const(es6)</strong></p>
<blockquote>
<p>作为一种代码规范（而非必须），常量名使用大写字母和下划线组合</p>
</blockquote>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>JavaScript中的数据类型分为原生类型（primitive）和对象类型（object）</p>
<p>原生类型是不可变的，有六种类型：</p>
<ul>
<li>Undefined（唯一值undefined）</li>
<li>Null（唯一值null）</li>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol（es6）</li>
</ul>
<a id="more"></a>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// undefined: 只申明未赋值，会默认设为undefined</span>
a <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// null: 用来表示数据未知或不可用</span>

<span class="token comment" spellcheck="true">// 使用typeof操作符可返回操作数的类型字符串</span>
<span class="token keyword">typeof</span> operand
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">使用typeof操作符结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Undefined</td>
<td style="text-align:left"><code>&quot;undefined&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Null</td>
<td style="text-align:left"><code>&quot;object&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left"><code>&quot;boolean&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Number</td>
<td style="text-align:left"><code>&quot;number&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left"><code>&quot;string&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Symbol</td>
<td style="text-align:left"><code>&quot;symbol&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">函数对象</td>
<td style="text-align:left"><code>&quot;function&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">任何其他对象</td>
<td style="text-align:left"><code>&quot;object&quot;</code></td>
</tr>
</tbody>
</table>
<p>原生的number、string、boolean都有对应的对象类型Number、String、Boolean，这些对象提供了一些方便的内置方法，原生类型也可以调用这些对象上的方法，其原理是：在调用方法时临时生成对应的对象类型，该对象正常调用方法，调用结束后立即舍弃临时对象</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>
s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 'ABC'</span>

<span class="token comment" spellcheck="true">// 实际执行逻辑大概如下</span>
<span class="token keyword">const</span> tmpS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
tmpS<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tmpS <span class="token operator">=</span> undefined<span class="token punctuation">;</span>
</code></pre>
<p>JS也提供了其他常用的内置对象：</p>
<ul>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Math</li>
</ul>
<h4 id="2-1-Number"><a href="#2-1-Number" class="headerlink" title="2.1 Number"></a>2.1 Number</h4><p>JS中的number类型都是按64位浮点数方式存储，能够表示的整数范围是-2^53~2^53（包含边界值）</p>
<p>从表现形式来看有<strong>十进制</strong>（整数，小数，科学计数法e），<strong>二进制</strong>，<strong>八进制</strong>（0o开头），<strong>十六进制</strong>（0x开头），<strong>NaN</strong>（非数字），<strong>Infinity</strong>（无穷大），<strong>-Infinity</strong>（负无穷大）</p>
<p>在JS的数字运算中，溢出、下溢、被0整除时不会报错。结果溢出时用Infinity来表示结果。结果为非数字值时用NaN表示</p>
<p>NaN是一个特殊的数值，表示在本该返回数值的操作中没有返回数值的情况。与任何值都不相等，包括NaN本身</p>
<p>Number对象上还定义了一些边界数字：</p>
<pre class=" language-javascript"><code class="language-javascript">Number<span class="token punctuation">.</span>MAX_SAFE_INTEGER  <span class="token comment" spellcheck="true">// 最大整数</span>
Number<span class="token punctuation">.</span>MIN_SAFE_INTEGER  <span class="token comment" spellcheck="true">// 最小整数</span>
Number<span class="token punctuation">.</span>MAX_VALUE  <span class="token comment" spellcheck="true">// 最大数2^53</span>
Number<span class="token punctuation">.</span>MIN_VALUE  <span class="token comment" spellcheck="true">// 最小数-2^53</span>
</code></pre>
<p>常用Math对象上的方法来进行数学计算：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Math对象的常用函数和常量</span>
Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 8: 2的3次幂</span>
Math<span class="token punctuation">.</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// e的3次幂</span>
Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 1: 四舍五入</span>
Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1: 向上求整</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 0: 向下求整</span>
Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 1: 求绝对值</span>
Math<span class="token punctuation">.</span><span class="token function">trunc</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -5: 去掉小数部分</span>
Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 返回最大值</span>
Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 返回最小值</span>
Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 生成一个[0, 1)区间的伪随机数</span>
Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 2: 求平方根</span>
Math<span class="token punctuation">.</span><span class="token function">cbrt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3: 求立方根</span>
Math<span class="token punctuation">.</span>PI          <span class="token comment" spellcheck="true">// π</span>
Math<span class="token punctuation">.</span>E           <span class="token comment" spellcheck="true">// e: 自然对数的底数</span>

<span class="token comment" spellcheck="true">// 在给定的最小最大值之间随机取一个整数</span>
Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>max<span class="token operator">-</span>min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>min
</code></pre>
<h4 id="2-2-String"><a href="#2-2-String" class="headerlink" title="2.2 String"></a>2.2 String</h4><p>模板字符串</p>
<p>在ES6之前，如果要动态生成字符串，需要这样写：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Snow'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> welcome <span class="token operator">=</span> <span class="token string">'Hello '</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
</code></pre>
<p>但在ES6中，可以很方便地使用模板字符串实现：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Snow'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> welcome <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>
</code></pre>
<p>字符串常用方法：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'Hello World'</span>
s<span class="token punctuation">.</span>length            <span class="token comment" spellcheck="true">// => "11" : 字符长度</span>
s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// => "H" : 第一个字符</span>
s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// => "2" : 字符l首次出现的索引位置</span>
s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// => "9" : 字符l在索引位置5及之后首次出现的位置</span>
s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// => "9" : 字符l最后一次出现的位置</span>
s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// => ["Hello", "World"] : 按传入的分隔符分割成数组</span>
s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// => "HeLlo World" : 字符替换</span>
s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// => "HELLO WORLD" : 全文转换为大写</span>
s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// => "hello world" : 全文转换为小写</span>
s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// => "ello" : 从索引位置1开始，截取4个字符</span>
s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// => "orld" : 从索引位置length-4开始截取，第一个参数可为负，第二个参数若为负则转成0</span>
s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// => "ell" : 取指定索引位置之间的字符，>=1且&lt;4</span>
s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// => "H" : 把所有负数参数转成0</span>
s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// => "ell" : 取指定索引位置之间的字符，>=1且&lt;4</span>
s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// => "ello W" : >=1且&lt;length-4，所有参数均可为负</span>

<span class="token comment" spellcheck="true">// 在不支持trim方法的情况下，可自行写一个trim函数：</span>
String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>trim <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\s+|\s+$/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="2-3-类型转换"><a href="#2-3-类型转换" class="headerlink" title="2.3 类型转换"></a>2.3 类型转换</h4><p><strong>string转number</strong></p>
<ul>
<li>调用Number对象构造器，能转换数字则返回对应数字，不能则返回NaN</li>
<li>调用内置函数<code>parseInt(string,[ radix ])</code>或<code>parseFloat(string,[ radix ])</code>，radix指定解析进制规则，默认10</li>
<li>使用’*’运算符会默认将字符串转换为数字，若不能转换则运算结果为NaN</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token string">'3'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 90</span>
a <span class="token operator">=</span> <span class="token string">'30'</span> <span class="token operator">*</span> <span class="token string">'3'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 90</span>
a <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// NaN</span>
</code></pre>
<p><strong>number转string</strong></p>
<ul>
<li>调用对象的<code>toString()</code>方法，JS的所有对象都会有一个toString方法</li>
<li>使用’+’连接数字和字符串时，会默认将数字转换为字符串</li>
</ul>
<p><strong>转boolean</strong></p>
<ul>
<li>调用Boolean对象构造器</li>
<li>使用’!!’逻辑运算符</li>
</ul>
<p>JS中的任何值都能转换为布尔值。undefined、null、0、-0、NaN、“”(空字符串)会转换为false，其余则转换为true。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> boo1 <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>
<span class="token keyword">const</span> boo2 <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>b<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// false</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-变量和常量&quot;&gt;&lt;a href=&quot;#1-变量和常量&quot; class=&quot;headerlink&quot; title=&quot;1. 变量和常量&quot;&gt;&lt;/a&gt;1. 变量和常量&lt;/h3&gt;&lt;p&gt;JavaScript中的数据存储类型分为变量和常量（常量是es6新引入的），常量在声明初始化后就不能改变其值，变量则可任意改变。代码中尽可能使用常量以避免意外改变了值，除非业务逻辑明确需要一个变量&lt;/p&gt;
&lt;p&gt;变量声明关键字： &lt;strong&gt;var&lt;/strong&gt;, &lt;strong&gt;let(es6块级作用域申明)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常量声明关键字： &lt;strong&gt;const(es6)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为一种代码规范（而非必须），常量名使用大写字母和下划线组合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-数据类型&quot;&gt;&lt;a href=&quot;#2-数据类型&quot; class=&quot;headerlink&quot; title=&quot;2. 数据类型&quot;&gt;&lt;/a&gt;2. 数据类型&lt;/h3&gt;&lt;p&gt;JavaScript中的数据类型分为原生类型（primitive）和对象类型（object）&lt;/p&gt;
&lt;p&gt;原生类型是不可变的，有六种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undefined（唯一值undefined）&lt;/li&gt;
&lt;li&gt;Null（唯一值null）&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Symbol（es6）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="JavaScript" scheme="http://snowgan.com/categories/Front-End/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://snowgan.com/tags/JavaScript/"/>
    
      <category term="Basic" scheme="http://snowgan.com/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Swift笔记（一） 基础知识</title>
    <link href="http://snowgan.com/2015/06/25/Swift%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://snowgan.com/2015/06/25/Swift笔记（一）-基础知识/</id>
    <published>2015-06-25T06:47:30.000Z</published>
    <updated>2018-06-28T17:30:06.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>在Swift文件中，全局作用域的代码会被自动当做程序的入口点，所以不需要main函数。<br>也不需要在每个语句结尾写上分号，除非在同一行内写多条独立的语句</p>
<p><strong>基本类型</strong>： <code>Int</code>, <code>Float</code>, <code>Double</code>, <code>Bool</code>, <code>Array</code>, <code>Dictionary</code></p>
<blockquote>
<p>关于Array和Dictionary:<br>不同于obj-C的NSAaary和NSDictionary，Swift的Array和Dictionary是基本类型而不是对象，但两者在大部分情况下是可直接互换的</p>
</blockquote>
<p><strong>声明方式</strong><br>使用let来声明常量，使用var来声明变量。  </p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> myVariable <span class="token operator">=</span> <span class="token number">42</span>
myVariable <span class="token operator">=</span> <span class="token number">50</span>
<span class="token keyword">let</span> myConstant <span class="token operator">=</span> <span class="token number">42</span>
</code></pre>
<a id="more"></a>
<p>一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。如果一个值在后续使用中不会改变，则声明为常量，否则声明为变量。</p>
<p>Swift是一种类型安全（type safe）的语言，每个值都必须有确定的类型，但声明时类型是可选的：  </p>
<ul>
<li>如果声明的同时赋值，编译器会自动推断类型。  </li>
<li>如果初始值没有提供足够的信息（或者没有初始值），就需要在变量后面声明类型，在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。  </li>
</ul>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> implicitInteger <span class="token operator">=</span> <span class="token number">70</span>
<span class="token keyword">let</span> implicitDouble <span class="token operator">=</span> <span class="token number">70.0</span>
<span class="token comment" spellcheck="true">// 自动类型推断会认定为Double类型，若要声明Float类型，需显示声明类型</span>
<span class="token keyword">let</span> explicitDouble<span class="token punctuation">:</span> <span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">70</span>
</code></pre>
<p>值永远不会被隐式转换为其他类型。如果你需要把一个值转换成其他类型，请显式转换。如下例子若去掉显示转换的String，则会编译报错：</p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> label <span class="token operator">=</span> <span class="token string">"The width is"</span>
<span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token number">94</span>
<span class="token keyword">let</span> widthLabel <span class="token operator">=</span> label <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span>
</code></pre>
<p>有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：</p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token number">3</span>
<span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> appleSummary <span class="token operator">=</span> <span class="token string">"I have <span class="token interpolation"><span class="token delimiter variable">\(</span>apples<span class="token delimiter variable">)</span></span> apples."</span>
<span class="token keyword">let</span> fruitSummary <span class="token operator">=</span> <span class="token string">"I have <span class="token interpolation"><span class="token delimiter variable">\(</span>apples <span class="token operator">+</span> oranges<span class="token delimiter variable">)</span></span> pieces of fruit."</span>
</code></pre>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>条件判断：<code>if-else</code> 和 <code>switch</code><br>循环：<code>for-in</code>、 <code>for</code>、 <code>while</code> 和 <code>do-while</code>  </p>
<blockquote>
<p>NOTE:<br>在Swift2.0中将<code>do-while</code>改为了<code>repeat-while</code>  </p>
</blockquote>
<p>条件语句的括号是可选的，执行语句主体写在花括号内</p>
<p>if判断条件必须是一个Bool表达式，因为值不能隐式转换类型，所以如<code>if condition { … }</code>这样的写法中若condition不是一个Bool类型都会报错</p>
<p>switch中的case语句若覆盖了所有情况，则可省略default语句；<br>匹配到任一条case语句执行后会直接跳出switch，不会继续执行后续case语句，所以不需要在每条case代码后加上break。</p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">let</span> vegetable <span class="token operator">=</span> <span class="token string">"red pepper"</span>
<span class="token keyword">switch</span> vegetable <span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string">"celery"</span><span class="token punctuation">:</span>
    <span class="token keyword">let</span> vegetableComment <span class="token operator">=</span> <span class="token string">"Add some raisins and make ants on a log."</span>
<span class="token keyword">case</span> <span class="token string">"cucumber"</span><span class="token punctuation">,</span> <span class="token string">"watercress"</span><span class="token punctuation">:</span>
    <span class="token keyword">let</span> vegetableComment <span class="token operator">=</span> <span class="token string">"That would make a good tea sandwich."</span>
<span class="token keyword">case</span> <span class="token keyword">let</span> x <span class="token keyword">where</span> x<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">let</span> vegetableComment <span class="token operator">=</span> <span class="token string">"Is it a spicy <span class="token interpolation"><span class="token delimiter variable">\(</span>x<span class="token delimiter variable">)</span></span>?"</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token keyword">let</span> vegetableComment <span class="token operator">=</span> <span class="token string">"Everything tastes good in soup."</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h2><p>使用typealias关键字来定义类型别名。  </p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">typealias</span> <span class="token builtin">AudioSample</span> <span class="token operator">=</span> <span class="token builtin">UInt16</span>
</code></pre>
<p>定义了一个类型别名之后，可以在任何使用原始名的地方使用别名。<br>下例中，AudioSample被定义为UInt16的一个别名。因为它是别名，AudioSample.min实际上是UInt16.min，所以会给maxAmplitudeFound赋一个初值0。</p>
<pre class=" language-swift"><code class="language-swift"><span class="token keyword">var</span> maxAmplitudeFound <span class="token operator">=</span> <span class="token builtin">AudioSample</span><span class="token punctuation">.</span><span class="token builtin">min</span>
<span class="token comment" spellcheck="true">// maxAmplitudeFound 现在是 0</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单值&quot;&gt;&lt;a href=&quot;#简单值&quot; class=&quot;headerlink&quot; title=&quot;简单值&quot;&gt;&lt;/a&gt;简单值&lt;/h2&gt;&lt;p&gt;在Swift文件中，全局作用域的代码会被自动当做程序的入口点，所以不需要main函数。&lt;br&gt;也不需要在每个语句结尾写上分号，除非在同一行内写多条独立的语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本类型&lt;/strong&gt;： &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于Array和Dictionary:&lt;br&gt;不同于obj-C的NSAaary和NSDictionary，Swift的Array和Dictionary是基本类型而不是对象，但两者在大部分情况下是可直接互换的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明方式&lt;/strong&gt;&lt;br&gt;使用let来声明常量，使用var来声明变量。  &lt;/p&gt;
&lt;pre class=&quot; language-swift&quot;&gt;&lt;code class=&quot;language-swift&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
myVariable &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; myConstant &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://snowgan.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://snowgan.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://snowgan.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift KVO模式</title>
    <link href="http://snowgan.com/2015/06/25/Swift-KVO%E6%A8%A1%E5%BC%8F/"/>
    <id>http://snowgan.com/2015/06/25/Swift-KVO模式/</id>
    <published>2015-06-25T06:41:19.000Z</published>
    <updated>2015-06-25T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>KVO(Key-Value Observing)是一种观察者模式。继承自NSObject的对象可以注册监听任何属性的变化，并指定观察者对象。<br>注册监听属性的方法<code>addObserver:forKeyPath:options:context:</code></p>
<blockquote>
<p>注：被监听属性要用dynamic关键字修饰</p>
</blockquote>
<p>方法声明： </p>
<pre class=" language-Swift"><code class="language-Swift">func addObserver(_ anObserver: NSObject, //指定观察者对象
           forKeyPath keyPath: String, //指定要监听的属性
              options options: NSKeyValueObservingOptions, //监听选项，指定要包含在change字典里的数据
              context context: UnsafeMutablePointer<void> //要传递给观察者的数据，可以注册多个相同观察者，相同属性，不同context的监听事件
)
</void></code></pre>
<a id="more"></a>
<p>其中options参数类型NSKeyValueObservingOptions是一个结构体，包含四个属性。<br>定义： </p>
<pre class=" language-Swift"><code class="language-Swift">struct NSKeyValueObservingOptions : RawOptionSetType {
    init(_ rawValue: UInt)
    init(rawValue rawValue: UInt)
    static var New: NSKeyValueObservingOptions { get } // change字典里包含新值
    static var Old: NSKeyValueObservingOptions { get } // change字典里包含旧值
    static var Initial: NSKeyValueObservingOptions { get } // 在注册监听的时候就会立即发送消息给观察者
    static var Prior: NSKeyValueObservingOptions { get } // 在监听的属性变化前后各发送一次消息给观察者
}
</code></pre>
<p>当监听的属性发生变化时，会向观察者发送<code>observeValueForKeyPath:ofObject:change:context:</code>消息，观察者可以重写该方法以实现自定义行为。<br>方法声明：  </p>
<pre class=" language-Swift"><code class="language-Swift">func observeValueForKeyPath(_ keyPath: String,
                      ofObject object: AnyObject,
                        change change: [NSObject : AnyObject],
                      context context: UnsafeMutablePointer<void>)
</void></code></pre>
<p>观察者被释放前需要取消监听，否则消息发送给一个已销毁的对象会造成程序崩溃<br>方法声明：  </p>
<pre class=" language-Swift"><code class="language-Swift">func removeObserver(_ anObserver: NSObject,
              forKeyPath keyPath: String)

func removeObserver(_ observer: NSObject,
            forKeyPath keyPath: String,
               context context: UnsafeMutablePointer<void>)
</void></code></pre>
<p>示例：当用户点击“Like”按钮，label的数字会相应加1，相当于一个点赞计数的功能  </p>
<pre class=" language-Swift"><code class="language-Swift">import UIKit

class Like: NSObject {
    dynamic var count: Int
    init(count: Int) {
        self.count = count
    }
}

class ViewController: UIViewController {
    var like = Like(count: 0)
    override func viewDidLoad() {
        super.viewDidLoad()
        // 注册监听事件
        like.addObserver(self, forKeyPath: "count", options: nil, context: nil)

        setupLabel()
        setupButton()
    }

    func setupLabel() {
        let label = UILabel()
        label.bounds.size = CGSize(width: 20, height: 20)
        label.tag = 1
        label.backgroundColor = UIColor.yellowColor()
        label.text = "\(like.count)"
        label.autoresizingMask = .FlexibleWidth
        view.addSubview(label)
        label.setTranslatesAutoresizingMaskIntoConstraints(false)
        view.addConstraint(NSLayoutConstraint(item: label, attribute: .CenterX, relatedBy: .Equal, toItem: view, attribute: .CenterX, multiplier: 1, constant: 0))
        view.addConstraint(NSLayoutConstraint(item: label, attribute: .CenterY, relatedBy: .Equal, toItem: view, attribute: .CenterY, multiplier: 1, constant: 0))
    }

    func setupButton() {
        let button = UIButton.buttonWithType(UIButtonType.System) as! UIButton
        button.tag = 2
        button.setTitle("Like", forState: UIControlState.Normal)
        view.addSubview(button)
        button.setTranslatesAutoresizingMaskIntoConstraints(false)
        view.addConstraint(NSLayoutConstraint(item: button, attribute: .Top, relatedBy: .Equal, toItem: view.viewWithTag(1), attribute: .Bottom, multiplier: 1, constant: 10))
        view.addConstraint(NSLayoutConstraint(item: button, attribute: .CenterX, relatedBy: .Equal, toItem: view, attribute: .CenterX, multiplier: 1, constant: 0))
        button.addTarget(self, action: "buttonPressed", forControlEvents: UIControlEvents.TouchUpInside)
    }

    func buttonPressed() {
        like.count++
    }

    override func observeValueForKeyPath(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer<void>) {
        if let label = (view.viewWithTag(1) as? UILabel) {
            label.text = "\(like.count)"
        }
    }

    deinit {
        like.removeObserver(self, forKeyPath: "count")
    }

}
</void></code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;KVO(Key-Value Observing)是一种观察者模式。继承自NSObject的对象可以注册监听任何属性的变化，并指定观察者对象。&lt;br&gt;注册监听属性的方法&lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：被监听属性要用dynamic关键字修饰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方法声明： &lt;/p&gt;
&lt;pre class=&quot; language-Swift&quot;&gt;&lt;code class=&quot;language-Swift&quot;&gt;func addObserver(_ anObserver: NSObject, //指定观察者对象
           forKeyPath keyPath: String, //指定要监听的属性
              options options: NSKeyValueObservingOptions, //监听选项，指定要包含在change字典里的数据
              context context: UnsafeMutablePointer&lt;void&gt; //要传递给观察者的数据，可以注册多个相同观察者，相同属性，不同context的监听事件
)
&lt;/void&gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://snowgan.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://snowgan.com/tags/Swift/"/>
    
  </entry>
  
</feed>
