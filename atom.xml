<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snowgan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://snowgan.com/"/>
  <updated>2016-12-19T07:22:32.000Z</updated>
  <id>http://snowgan.com/</id>
  
  <author>
    <name>Snowgan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript数组笔记</title>
    <link href="http://snowgan.com/2016/12/02/Javascript%E6%95%B0%E7%BB%84%E7%AC%94%E8%AE%B0/"/>
    <id>http://snowgan.com/2016/12/02/Javascript数组笔记/</id>
    <published>2016-12-02T08:02:45.000Z</published>
    <updated>2016-12-19T07:22:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组的每一项可以保存任意类型的数据</p>
<h3 id="1-数组创建"><a href="#1-数组创建" class="headerlink" title="1. 数组创建"></a>1. 数组创建</h3><p>创建数组有两种方式（多使用第二种方式）：</p>
<ol>
<li><p>使用Array构造函数</p>
<p><code>var arr1 = new Array( &quot;hello&quot;, &quot;world&quot; );</code></p>
</li>
<li><p>使用字面量形式[]</p>
<p><code>var arr2 = [ &quot;hello&quot;, &quot;world&quot; ];</code></p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组类型判断（若Array的toString方法被重写，则不适用）：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-常用属性和方法"><a href="#2-常用属性和方法" class="headerlink" title="2. 常用属性和方法"></a>2. 常用属性和方法</h3><h4 id="2-1-length"><a href="#2-1-length" class="headerlink" title="2.1 .length"></a>2.1 .length</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Length of an array</span></div><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"!"</span> ];</div><div class="line"><span class="built_in">console</span>.log( myArray.length ); <span class="comment">// 3</span></div><div class="line"><span class="comment">// Empty array</span></div><div class="line">myArray.length = <span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.log( myArray ); <span class="comment">// myArray =&gt; []</span></div><div class="line"><span class="comment">// truncate array</span></div><div class="line">myArray.length = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log( myArray ); <span class="comment">// myArray =&gt; [ "hello", "world"]</span></div><div class="line">myArray.length = <span class="number">4</span>;</div><div class="line"><span class="built_in">console</span>.log( myArray ); <span class="comment">// myArray =&gt; [ "hello", "world", "!", undefined]</span></div></pre></td></tr></table></figure>
<h4 id="2-2-concat"><a href="#2-2-concat" class="headerlink" title="2.2 .concat()"></a>2.2 .concat()</h4><p>连接两个数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ];</div><div class="line"><span class="keyword">var</span> myOtherArray = [ <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ];</div><div class="line"><span class="keyword">var</span> wholeArray = myArray.concat( myOtherArray ); <span class="comment">// [ 2, 3, 4, 5, 6, 7 ]</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-3-join"><a href="#2-3-join" class="headerlink" title="2.3 .join()"></a>2.3 .join()</h4><p>连接数组内的各个元素，可指定分隔符</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Joining elements</span></div><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">"hello"</span>, <span class="string">"world"</span>, <span class="string">"!"</span> ];</div><div class="line"><span class="comment">// The default separator is a comma.</span></div><div class="line"><span class="built_in">console</span>.log( myArray.join() ); <span class="comment">// "hello,world,!"</span></div><div class="line"><span class="comment">// Any string can be used as separator...</span></div><div class="line"><span class="built_in">console</span>.log( myArray.join( <span class="string">" "</span> ) ); <span class="comment">// "hello world !";</span></div><div class="line"><span class="built_in">console</span>.log( myArray.join( <span class="string">"!!"</span> ) ); <span class="comment">// "hello!!world!!!";</span></div><div class="line"><span class="comment">// ...including an empty one.</span></div><div class="line"><span class="built_in">console</span>.log( myArray.join( <span class="string">""</span> ) ); <span class="comment">// "helloworld!"</span></div></pre></td></tr></table></figure>
<h4 id="2-4-push-amp-pop"><a href="#2-4-push-amp-pop" class="headerlink" title="2.4 .push() &amp; .pop()"></a>2.4 .push() &amp; .pop()</h4><p>在数组尾部添加或删除元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Pushing and popping</span></div><div class="line"><span class="keyword">var</span> myArray = [];</div><div class="line">myArray.push( <span class="number">0</span> ); <span class="comment">// [ 0 ]</span></div><div class="line">myArray.push( <span class="number">2</span> ); <span class="comment">// [ 0 , 2 ]</span></div><div class="line">myArray.push( <span class="number">7</span> ); <span class="comment">// [ 0 , 2 , 7 ]</span></div><div class="line">myArray.pop(); <span class="comment">// [ 0 , 2 ]</span></div></pre></td></tr></table></figure>
<h4 id="2-5-unshift-amp-shift"><a href="#2-5-unshift-amp-shift" class="headerlink" title="2.5 .unshift() &amp; .shift()"></a>2.5 .unshift() &amp; .shift()</h4><p>在数组头部添加或删除元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [];</div><div class="line">myArray.unshift( <span class="number">0</span> ); <span class="comment">// [ 0 ]</span></div><div class="line">myArray.unshift( <span class="number">2</span> ); <span class="comment">// [ 2 , 0 ]</span></div><div class="line">myArray.unshift( <span class="number">7</span> ); <span class="comment">// [ 7 , 2 , 0 ]</span></div><div class="line">myArray.shift(); <span class="comment">// [ 2, 0 ]</span></div></pre></td></tr></table></figure>
<h4 id="2-6-reverse"><a href="#2-6-reverse" class="headerlink" title="2.6 .reverse()"></a>2.6 .reverse()</h4><p>使数组元素倒序</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">"world"</span> , <span class="string">"hello"</span> ];</div><div class="line">myArray.reverse(); <span class="comment">// [ "hello", "world" ]</span></div></pre></td></tr></table></figure>
<h4 id="2-7-indexOf-amp-lastIndexOf"><a href="#2-7-indexOf-amp-lastIndexOf" class="headerlink" title="2.7 .indexOf() &amp; .lastIndexOf()"></a>2.7 .indexOf() &amp; .lastIndexOf()</h4><p>搜索指定值在数组中的位置，没找到返回-1. lastIndexOf()从后往前搜索</p>
<p>传入两个参数：</p>
<p>value: 要搜索的值</p>
<p>index: 开始搜索位置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="string">"world"</span> , <span class="string">"hello"</span> , <span class="string">"!"</span> , <span class="string">"world"</span> , <span class="string">"hello"</span>, <span class="string">"!"</span>];</div><div class="line"><span class="built_in">console</span>.log(myArray.indexOf(<span class="string">"!"</span>)); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(myArray.indexOf(<span class="string">"!"</span>, <span class="number">3</span>)); <span class="comment">//5</span></div><div class="line"><span class="built_in">console</span>.log(myArray.lastIndexOf(<span class="string">"!"</span>, <span class="number">3</span>)); <span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(myArray.lastIndexOf(<span class="string">"!"</span>, <span class="number">1</span>)); <span class="comment">//-1</span></div></pre></td></tr></table></figure>
<h4 id="2-8-slice"><a href="#2-8-slice" class="headerlink" title="2.8 .slice()"></a>2.8 .slice()</h4><p><code>slice([begin[, end]])</code></p>
<p>返回一个从begin开始到end结束但不包括end位置的新数组，begin和end可为负数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> ];</div><div class="line"><span class="keyword">var</span> newArray = myArray.slice( <span class="number">3</span> );</div><div class="line"><span class="built_in">console</span>.log( myArray ); <span class="comment">// [ 1, 2, 3, 4, 5, 6, 7, 8 ]</span></div><div class="line"><span class="built_in">console</span>.log( newArray ); <span class="comment">// [ 4, 5, 6, 7, 8 ]</span></div><div class="line">newArray = myArray.slice( <span class="number">-3</span> );</div><div class="line"><span class="built_in">console</span>.log( newArray ); <span class="comment">// [ 6, 7, 8 ]</span></div><div class="line">newArray = myArray.slice( <span class="number">2</span>, <span class="number">-3</span> );</div><div class="line"><span class="built_in">console</span>.log( newArray ); <span class="comment">// [ 3, 4, 5 ]</span></div><div class="line">newArray = myArray.slice( <span class="number">5</span>, <span class="number">-3</span> );</div><div class="line"><span class="built_in">console</span>.log( newArray ); <span class="comment">// []</span></div></pre></td></tr></table></figure>
<h4 id="2-9-splice"><a href="#2-9-splice" class="headerlink" title="2.9 .splice()"></a>2.9 .splice()</h4><p><code>myArray.splice( index, length, values, ... )</code></p>
<p>index: 开始位置</p>
<p>length: 删除元素个数</p>
<p>values: 添加元素，插入到index指定的位置</p>
<p>该函数返回被删除的元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">5</span> ];</div><div class="line"><span class="keyword">var</span> res = myArray.splice( <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> );</div><div class="line"><span class="built_in">console</span>.log( myArray ); <span class="comment">// [ 0, 1, 2, 3, 4, 5 ]</span></div><div class="line"><span class="built_in">console</span>.log( res ); <span class="comment">// [7, 8]</span></div></pre></td></tr></table></figure>
<h4 id="2-10-sort"><a href="#2-10-sort" class="headerlink" title="2.10 .sort()"></a>2.10 .sort()</h4><p>数组排序，默认升序排列。可传入一个函数参数，该函数定义了排序规则</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span> ];</div><div class="line">myArray.sort(); <span class="comment">// 1, 3, 4, 6</span></div><div class="line"></div><div class="line"><span class="comment">// Sorting with comparing function.</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">descending</span>(<span class="params"> a, b </span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> b - a;  <span class="comment">// 如果a应排在b前，则返回负数，反之则返回正数</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myArray = [ <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span> ];</div><div class="line">myArray.sort( descending ); <span class="comment">// [ 6, 4, 3, 1 ]</span></div></pre></td></tr></table></figure>
<h4 id="2-11-迭代方法"><a href="#2-11-迭代方法" class="headerlink" title="2.11 迭代方法"></a>2.11 迭代方法</h4><p><code>.every(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数，如果该函数对每一项都返回true，则every()返回true</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);   <span class="comment">// false</span></div><div class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><code>.some(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数，如果该函数对任何一项返回true，则some()返回true</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10);  <span class="comment">// false</span></div><div class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p><code>.forEach(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'a['</span> + index + <span class="string">'] = '</span> + element);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Notice that index 2 is skipped since there is no item at</span></div><div class="line"><span class="comment">// that position in the array.</span></div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, , <span class="number">9</span>].forEach(logArrayElements);</div><div class="line"><span class="comment">// logs:</span></div><div class="line"><span class="comment">// a[0] = 2</span></div><div class="line"><span class="comment">// a[1] = 5</span></div><div class="line"><span class="comment">// a[3] = 9</span></div><div class="line"></div><div class="line"><span class="comment">// 如果在迭代过程中改变了数组，将影响接下来的迭代数据</span></div><div class="line"><span class="keyword">var</span> words = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>];</div><div class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(word);</div><div class="line">  <span class="keyword">if</span> (word === <span class="string">"two"</span>) &#123;</div><div class="line">    words.shift();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// one</span></div><div class="line"><span class="comment">// two</span></div><div class="line"><span class="comment">// four</span></div></pre></td></tr></table></figure>
<p><code>.map(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数, 返回每次函数调用的结果所组成的新数组</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> doubles = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num * <span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// doubles is now [2, 8, 18]. numbers is still [1, 4, 9]</span></div></pre></td></tr></table></figure>
<p><code>.filter(function(value[, index, array]) {})</code></p>
<p>对数组中的每一项运行指定函数, 返回函数调用返回true的项所组成的新函数</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt;= <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> filtered = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(isBigEnough);</div><div class="line"><span class="comment">// filtered is [12, 130, 44]</span></div></pre></td></tr></table></figure>
<p><code>.reduce(function(previousValue, currentValue, currentIndex, array) {}[, initValue])</code></p>
<p>对数组中的每一项运行指定函数，previousValue是上一次调用函数的结果，reduce()返回最后一次调用函数的结果</p>
<p>reduce在数组为空且没有定义initialValue时，会抛出错误</p>
<p>reduce在数组只有一个元素且没有定义initialValue时，将不会执行指定函数，直接返回该元素</p>
<p>reduce在数组为空且定义initialValue时，将不会执行指定函数，直接返回initialValue</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a.concat(b);</div><div class="line">&#125;, []);</div><div class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组的每一项可以保存任意类型的数据&lt;/p&gt;
&lt;h3 id=&quot;1-数组创建&quot;&gt;&lt;a href=&quot;#1-数组创建&quot; class=&quot;headerlink&quot; title=&quot;1. 数组创建&quot;&gt;&lt;/a&gt;1. 数组创建&lt;/h3&gt;&lt;p&gt;创建数组有两种方式（多使用第二种方式）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用Array构造函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var arr1 = new Array( &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; );&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用字面量形式[]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var arr2 = [ &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot; ];&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 数组类型判断（若Array的toString方法被重写，则不适用）：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isArray&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;obj&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.call(obj) === &lt;span class=&quot;string&quot;&gt;&#39;[object Array]&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-常用属性和方法&quot;&gt;&lt;a href=&quot;#2-常用属性和方法&quot; class=&quot;headerlink&quot; title=&quot;2. 常用属性和方法&quot;&gt;&lt;/a&gt;2. 常用属性和方法&lt;/h3&gt;&lt;h4 id=&quot;2-1-length&quot;&gt;&lt;a href=&quot;#2-1-length&quot; class=&quot;headerlink&quot; title=&quot;2.1 .length&quot;&gt;&lt;/a&gt;2.1 .length&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Length of an array&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArray = [ &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt; ];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( myArray.length ); &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Empty array&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myArray.length = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( myArray ); &lt;span class=&quot;comment&quot;&gt;// myArray =&amp;gt; []&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// truncate array&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myArray.length = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( myArray ); &lt;span class=&quot;comment&quot;&gt;// myArray =&amp;gt; [ &quot;hello&quot;, &quot;world&quot;]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myArray.length = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( myArray ); &lt;span class=&quot;comment&quot;&gt;// myArray =&amp;gt; [ &quot;hello&quot;, &quot;world&quot;, &quot;!&quot;, undefined]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-2-concat&quot;&gt;&lt;a href=&quot;#2-2-concat&quot; class=&quot;headerlink&quot; title=&quot;2.2 .concat()&quot;&gt;&lt;/a&gt;2.2 .concat()&lt;/h4&gt;&lt;p&gt;连接两个数组&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myArray = [ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myOtherArray = [ &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; ];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; wholeArray = myArray.concat( myOtherArray ); &lt;span class=&quot;comment&quot;&gt;// [ 2, 3, 4, 5, 6, 7 ]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="Javascript" scheme="http://snowgan.com/categories/Front-End/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://snowgan.com/tags/Javascript/"/>
    
      <category term="Array" scheme="http://snowgan.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>CSS模糊效果实践</title>
    <link href="http://snowgan.com/2016/12/01/CSS%E6%A8%A1%E7%B3%8A%E6%95%88%E6%9E%9C%E5%AE%9E%E8%B7%B5/"/>
    <id>http://snowgan.com/2016/12/01/CSS模糊效果实践/</id>
    <published>2016-12-01T02:47:51.000Z</published>
    <updated>2016-12-19T07:48:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bgimg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blur"</span>&gt;</span>模糊效果测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- css --&gt;</span></div><div class="line">.bgimg&#123;</div><div class="line">    height: 500px;</div><div class="line">    background-image: url(bgpic6.jpg);</div><div class="line">    background-size: contain;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div><div class="line">.blur &#123;</div><div class="line">    width: 200px;</div><div class="line">    height: 200px;</div><div class="line">    margin: 150px 250px;</div><div class="line">    background-color: hsla(0,0%,100%,.4);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/CSS模糊效果实践/001.png" alt="blur_test1"></p>
<p>这里使用hsla颜色值加透明度显示一个文字层的效果，但是并没有达到模糊的效果</p>
<a id="more"></a>
<h3 id="加入遮罩层"><a href="#加入遮罩层" class="headerlink" title="加入遮罩层"></a>加入遮罩层</h3><p>需要在文字层下方新建一个模糊层遮罩，可以在.blur元素里添加一个子元素，也可以直接添加一个伪元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.blur</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">150px</span> <span class="number">250px</span>;</div><div class="line">    <span class="attribute">positon</span>: relative;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.blur</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">    <span class="attribute">background-color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/CSS模糊效果实践/002.png" alt="blur_test2"></p>
<p>如果在.blur:after上不设置z-index，after伪元素会遮住文字</p>
<p>z-index为负值时，会将该元素设置在第一个有定位(position非static)且设置了z-index值得父元素上，这里我们设置.blur元素为<code>position: relative; z-index: 0</code>，所以.blur:after伪元素会位于.blur元素上，text文字下，且会遮盖设置在.blur元素上的任何背景</p>
<p>如果换在.bgimg元素上设置，则.blur:after伪元素位于.bgimg元素上，.blur元素下，这时如果我们给.blur元素设置一个背景色，会发现.blur:after伪元素被完全遮盖了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bgimg</span> &#123;</div><div class="line">    <span class="attribute">positon</span>: relative;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.blur</span> &#123;</div><div class="line">    <span class="comment">/* positon: relative; */</span></div><div class="line">    <span class="comment">/* z-index: 0; */</span></div><div class="line">    <span class="attribute">background-color</span>: wheat;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/CSS模糊效果实践/003.png" alt="blur_test3"></p>
<h3 id="遮罩层添加背景图"><a href="#遮罩层添加背景图" class="headerlink" title="遮罩层添加背景图"></a>遮罩层添加背景图</h3><p>使用<strong>background-attachment</strong>属性的fixed值，使背景图层和遮罩层的图片完全重合。background-attachment用来设置背景图的位置是固定在视图窗口上，还是跟随元素一起滚动</p>
<p>这里设置了一个border值来突出.blur元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bgimg</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(bgpic6.jpg);</div><div class="line">    <span class="attribute">background-size</span>: contain;</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-attachment</span>: fixed;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.blur</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(bgpic6.jpg);</div><div class="line">    <span class="attribute">background-size</span>: contain;</div><div class="line">    <span class="attribute">background-repeat</span>: no-repeat;</div><div class="line">    <span class="attribute">background-attachment</span>: fixed;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/CSS模糊效果实践/004.png" alt="blur_test4"></p>
<h3 id="使用filter-blur-实现模糊效果"><a href="#使用filter-blur-实现模糊效果" class="headerlink" title="使用filter: blur()实现模糊效果"></a>使用filter: blur()实现模糊效果</h3><p><code>filter: blur(5px)</code>指定一个模糊半径，可以非常方便地实现模糊效果。但只能在高级浏览器下使用，IE不兼容</p>
<p>该模糊效果会在边缘弱化，所以设置遮罩层的margin为负值使其size大于.blur元素，再在.blur元素上设置<code>overflow: hidden</code>切掉超出部分，可得到一个理想的模糊效果</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.blur</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.blur</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">blur</span>(5px);</div><div class="line">    <span class="attribute">margin</span>: -<span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/CSS模糊效果实践/005.png" alt="blur_test5"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bgimg"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blur"</span>&gt;</span>模糊效果测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- css --&gt;</span></div><div class="line">.bgimg&#123;</div><div class="line">    height: 500px;</div><div class="line">    background-image: url(bgpic6.jpg);</div><div class="line">    background-size: contain;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">    background-attachment: fixed;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div><div class="line">.blur &#123;</div><div class="line">    width: 200px;</div><div class="line">    height: 200px;</div><div class="line">    margin: 150px 250px;</div><div class="line">    position: relative;</div><div class="line">    z-index: 2;</div><div class="line">    overflow: hidden;</div><div class="line">&#125;</div><div class="line">.blur:after &#123;</div><div class="line">    content: '';</div><div class="line">    position: absolute;</div><div class="line">    top: 0;</div><div class="line">    bottom: 0;</div><div class="line">    left: 0;</div><div class="line">    right: 0;</div><div class="line">    z-index: -1;</div><div class="line">    background-image: url(bgpic6.jpg);</div><div class="line">    background-size: contain;</div><div class="line">    background-repeat: no-repeat;</div><div class="line">    background-attachment: fixed;</div><div class="line">    filter: blur(5px);</div><div class="line">    margin: -10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>参考文章：</p>
<ol>
<li><a href="http://www.w3cplus.com/css3/css-secrets/frosted-glass-effect.html" target="_blank" rel="external">CSS秘密花园:磨砂玻璃效果</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/2012/03/zindex%E8%B4%9F%E5%80%BC-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E6%96%87%E5%AD%97%E9%9A%90%E8%97%8F/" target="_blank" rel="external">你到了第几层？图片式标题、按钮与隐藏文本</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初始状态&quot;&gt;&lt;a href=&quot;#初始状态&quot; class=&quot;headerlink&quot; title=&quot;初始状态&quot;&gt;&lt;/a&gt;初始状态&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- html --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bgimg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;blur&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;模糊效果测试&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- css --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.bgimg&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 500px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background-image: url(bgpic6.jpg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background-size: contain;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background-repeat: no-repeat;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    overflow: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.blur &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    width: 200px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    height: 200px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    margin: 150px 250px;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    background-color: hsla(0,0%,100%,.4);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;/image/CSS模糊效果实践/001.png&quot; alt=&quot;blur_test1&quot;&gt;&lt;/p&gt;
&lt;p&gt;这里使用hsla颜色值加透明度显示一个文字层的效果，但是并没有达到模糊的效果&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="CSS" scheme="http://snowgan.com/categories/Front-End/CSS/"/>
    
    
      <category term="CSS" scheme="http://snowgan.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基本类型</title>
    <link href="http://snowgan.com/2016/11/21/JavaScript%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://snowgan.com/2016/11/21/JavaScript基本类型/</id>
    <published>2016-11-21T14:25:13.000Z</published>
    <updated>2016-12-20T14:52:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-变量和常量"><a href="#1-变量和常量" class="headerlink" title="1 变量和常量"></a>1 变量和常量</h3><p>JavaScript中的数据存储类型分为变量和常量（常量是es6新引入的），常量在声明初始化后就不能改变其值，变量则可任意改变。代码中尽可能使用常量以避免意外改变了值，除非业务逻辑明确需要一个变量</p>
<p>变量声明关键字： <strong>var</strong>, <strong>let(es6块级作用域申明)</strong></p>
<p>常量声明关键字： <strong>const(es6)</strong></p>
<blockquote>
<p>作为一种代码规范（而非必须），常量名使用大写字母和下划线组合</p>
</blockquote>
<h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h3><p>JavaScript中的数据类型分为原生类型（primitive）和对象类型（object）</p>
<p>原生类型是不可变的，有六种类型：</p>
<ul>
<li>Undefined（唯一值undefined）</li>
<li>Null（唯一值null）</li>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol（es6）</li>
</ul>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a;   <span class="comment">// undefined: 只申明未赋值，会默认设为undefined</span></div><div class="line">a = <span class="literal">null</span> <span class="comment">// null: 用来表示数据未知或不可用</span></div><div class="line"></div><div class="line"><span class="comment">// 使用typeof操作符可返回操作数的类型字符串</span></div><div class="line"><span class="keyword">typeof</span> operand</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">使用typeof操作符结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Undefined</td>
<td style="text-align:left"><code>&quot;undefined&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Null</td>
<td style="text-align:left"><code>&quot;object&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left"><code>&quot;boolean&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Number</td>
<td style="text-align:left"><code>&quot;number&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left"><code>&quot;string&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">Symbol</td>
<td style="text-align:left"><code>&quot;symbol&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">函数对象</td>
<td style="text-align:left"><code>&quot;function&quot;</code></td>
</tr>
<tr>
<td style="text-align:left">任何其他对象</td>
<td style="text-align:left"><code>&quot;object&quot;</code></td>
</tr>
</tbody>
</table>
<p>原生的number、string、boolean都有对应的对象类型Number、String、Boolean，这些对象提供了一些方便的内置方法，原生类型也可以调用这些对象上的方法，其原理是：在调用方法时临时生成对应的对象类型，该对象正常调用方法，调用结束后立即舍弃临时对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> s = <span class="string">'abc'</span>;</div><div class="line">s.toUpperCase()  <span class="comment">// 'ABC'</span></div><div class="line"></div><div class="line"><span class="comment">// 实际执行逻辑大概如下</span></div><div class="line"><span class="keyword">const</span> tmpS = <span class="keyword">new</span> <span class="built_in">String</span>(s);</div><div class="line">tmpS.toUpperCase();</div><div class="line">tmpS = <span class="literal">undefined</span>;</div></pre></td></tr></table></figure>
<p>JS也提供了其他常用的内置对象：</p>
<ul>
<li>Array</li>
<li>Date</li>
<li>RegExp</li>
<li>Math</li>
</ul>
<h4 id="2-1-Number"><a href="#2-1-Number" class="headerlink" title="2.1 Number"></a>2.1 Number</h4><p>JS中的number类型都是按64位浮点数方式存储，能够表示的整数范围是-2^53~2^53（包含边界值）</p>
<p>从表现形式来看有<strong>十进制</strong>（整数，小数，科学计数法e），<strong>二进制</strong>，<strong>八进制</strong>（0o开头），<strong>十六进制</strong>（0x开头），<strong>NaN</strong>（非数字），<strong>Infinity</strong>（无穷大），<strong>-Infinity</strong>（负无穷大）</p>
<p>在JS的数字运算中，溢出、下溢、被0整除时不会报错。结果溢出时用Infinity来表示结果。结果为非数字值时用NaN表示</p>
<p>NaN是一个特殊的数值，表示在本该返回数值的操作中没有返回数值的情况。与任何值都不相等，包括NaN本身</p>
<p>Number对象上还定义了一些边界数字：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER  <span class="comment">// 最大整数</span></div><div class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER  <span class="comment">// 最小整数</span></div><div class="line"><span class="built_in">Number</span>.MAX_VALUE  <span class="comment">// 最大数2^53</span></div><div class="line"><span class="built_in">Number</span>.MIN_VALUE  <span class="comment">// 最小数-2^53</span></div></pre></td></tr></table></figure>
<p>常用Math对象上的方法来进行数学计算：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Math对象的常用函数和常量</span></div><div class="line"><span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">3</span>)   <span class="comment">// 8: 2的3次幂</span></div><div class="line"><span class="built_in">Math</span>.exp(<span class="number">3</span>)      <span class="comment">// e的3次幂</span></div><div class="line"><span class="built_in">Math</span>.round(<span class="number">.6</span>)   <span class="comment">// 1: 四舍五入</span></div><div class="line"><span class="built_in">Math</span>.ceil(<span class="number">.6</span>)    <span class="comment">// 1: 向上求整</span></div><div class="line"><span class="built_in">Math</span>.floor(<span class="number">.6</span>)   <span class="comment">// 0: 向下求整</span></div><div class="line"><span class="built_in">Math</span>.abs(<span class="number">-1</span>)     <span class="comment">// 1: 求绝对值</span></div><div class="line"><span class="built_in">Math</span>.trunc(<span class="number">-5.5</span>) <span class="comment">// -5: 去掉小数部分</span></div><div class="line"><span class="built_in">Math</span>.max(x, y)   <span class="comment">// 返回最大值</span></div><div class="line"><span class="built_in">Math</span>.min(x, y)   <span class="comment">// 返回最小值</span></div><div class="line"><span class="built_in">Math</span>.random()    <span class="comment">// 生成一个[0, 1)区间的伪随机数</span></div><div class="line"><span class="built_in">Math</span>.sqrt(<span class="number">4</span>)     <span class="comment">// 2: 求平方根</span></div><div class="line"><span class="built_in">Math</span>.cbrt(<span class="number">27</span>)    <span class="comment">// 3: 求立方根</span></div><div class="line"><span class="built_in">Math</span>.PI          <span class="comment">// π</span></div><div class="line"><span class="built_in">Math</span>.E           <span class="comment">// e: 自然对数的底数</span></div><div class="line"></div><div class="line"><span class="comment">// 在给定的最小最大值之间随机取一个整数</span></div><div class="line"><span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(max-min+<span class="number">1</span>))+min</div></pre></td></tr></table></figure>
<h4 id="2-2-String"><a href="#2-2-String" class="headerlink" title="2.2 String"></a>2.2 String</h4><p>模板字符串</p>
<p>在ES6之前，如果要动态生成字符串，需要这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Snow'</span>;</div><div class="line"><span class="keyword">var</span> welcome = <span class="string">'Hello '</span> + name;</div></pre></td></tr></table></figure>
<p>但在ES6中，可以很方便地使用模板字符串实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Snow'</span>;</div><div class="line"><span class="keyword">var</span> welcome = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<p>字符串常用方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> s = <span class="string">'Hello World'</span></div><div class="line">s.length            <span class="comment">// =&gt; "11" : 字符长度</span></div><div class="line">s.charAt(<span class="number">0</span>)         <span class="comment">// =&gt; "H" : 第一个字符</span></div><div class="line">s.indexOf(<span class="string">'l'</span>)      <span class="comment">// =&gt; "2" : 字符l首次出现的索引位置</span></div><div class="line">s.indexOf(<span class="string">'l'</span>, <span class="number">5</span>)   <span class="comment">// =&gt; "9" : 字符l在索引位置5及之后首次出现的位置</span></div><div class="line">s.lastIndexOf(<span class="string">'l'</span>)  <span class="comment">// =&gt; "9" : 字符l最后一次出现的位置</span></div><div class="line">s.split(<span class="string">' '</span>)        <span class="comment">// =&gt; ["Hello", "World"] : 按传入的分隔符分割成数组</span></div><div class="line">s.replace(<span class="string">'l'</span>, <span class="string">'L'</span>) <span class="comment">// =&gt; "HeLlo World" : 字符替换</span></div><div class="line">s.toUpperCase()     <span class="comment">// =&gt; "HELLO WORLD" : 全文转换为大写</span></div><div class="line">s.toLowerCase()     <span class="comment">// =&gt; "hello world" : 全文转换为小写</span></div><div class="line">s.substr(<span class="number">1</span>, <span class="number">4</span>)      <span class="comment">// =&gt; "ello" : 从索引位置1开始，截取4个字符</span></div><div class="line">s.substr(<span class="number">-4</span>)        <span class="comment">// =&gt; "orld" : 从索引位置length-4开始截取，第一个参数可为负，第二个参数若为负则转成0</span></div><div class="line">s.substring(<span class="number">1</span>, <span class="number">4</span>)   <span class="comment">// =&gt; "ell" : 取指定索引位置之间的字符，&gt;=1且&lt;4</span></div><div class="line">s.substring(<span class="number">1</span>, <span class="number">-4</span>)  <span class="comment">// =&gt; "H" : 把所有参数转成0</span></div><div class="line">s.slice(<span class="number">1</span>, <span class="number">4</span>)       <span class="comment">// =&gt; "ell" : 取指定索引位置之间的字符，&gt;=1且&lt;4</span></div><div class="line">s.slice(<span class="number">1</span>, <span class="number">-4</span>)      <span class="comment">// =&gt; "ello W" : &gt;=1且&lt;length-4，所有参数均可为负</span></div><div class="line"></div><div class="line"><span class="comment">// 在不支持trim方法的情况下，可自行写一个trim函数：</span></div><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>);&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-变量和常量&quot;&gt;&lt;a href=&quot;#1-变量和常量&quot; class=&quot;headerlink&quot; title=&quot;1 变量和常量&quot;&gt;&lt;/a&gt;1 变量和常量&lt;/h3&gt;&lt;p&gt;JavaScript中的数据存储类型分为变量和常量（常量是es6新引入的），常量在声明初始化后就不能改变其值，变量则可任意改变。代码中尽可能使用常量以避免意外改变了值，除非业务逻辑明确需要一个变量&lt;/p&gt;
&lt;p&gt;变量声明关键字： &lt;strong&gt;var&lt;/strong&gt;, &lt;strong&gt;let(es6块级作用域申明)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常量声明关键字： &lt;strong&gt;const(es6)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为一种代码规范（而非必须），常量名使用大写字母和下划线组合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;2-数据类型&quot;&gt;&lt;a href=&quot;#2-数据类型&quot; class=&quot;headerlink&quot; title=&quot;2 数据类型&quot;&gt;&lt;/a&gt;2 数据类型&lt;/h3&gt;&lt;p&gt;JavaScript中的数据类型分为原生类型（primitive）和对象类型（object）&lt;/p&gt;
&lt;p&gt;原生类型是不可变的，有六种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Undefined（唯一值undefined）&lt;/li&gt;
&lt;li&gt;Null（唯一值null）&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Symbol（es6）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://snowgan.com/categories/Front-End/"/>
    
      <category term="Javascript" scheme="http://snowgan.com/categories/Front-End/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://snowgan.com/tags/Javascript/"/>
    
      <category term="Basic" scheme="http://snowgan.com/tags/Basic/"/>
    
  </entry>
  
  <entry>
    <title>Swift笔记（一） 基础知识</title>
    <link href="http://snowgan.com/2015/06/25/Swift%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://snowgan.com/2015/06/25/Swift笔记（一）-基础知识/</id>
    <published>2015-06-25T06:47:30.000Z</published>
    <updated>2015-06-25T09:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>在Swift文件中，全局作用域的代码会被自动当做程序的入口点，所以不需要main函数。<br>也不需要在每个语句结尾写上分号，除非在同一行内写多条独立的语句</p>
<p><strong>基本类型</strong>： <code>Int</code>, <code>Float</code>, <code>Double</code>, <code>Bool</code>, <code>Array</code>, <code>Dictionary</code></p>
<blockquote>
<p>关于Array和Dictionary:<br>不同于obj-C的NSAaary和NSDictionary，Swift的Array和Dictionary是基本类型而不是对象，但两者在大部分情况下是可直接互换的</p>
</blockquote>
<p><strong>声明方式</strong><br>使用let来声明常量，使用var来声明变量。  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myVariable = <span class="number">42</span></div><div class="line">myVariable = <span class="number">50</span></div><div class="line"><span class="keyword">let</span> myConstant = <span class="number">42</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>一个常量的值，在编译的时候，并不需要有明确的值，但是你只能为它赋值一次。如果一个值在后续使用中不会改变，则声明为常量，否则声明为变量。</p>
<p>Swift是一种类型安全（type safe）的语言，每个值都必须有确定的类型，但声明时类型是可选的：  </p>
<ul>
<li>如果声明的同时赋值，编译器会自动推断类型。  </li>
<li>如果初始值没有提供足够的信息（或者没有初始值），就需要在变量后面声明类型，在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。  </li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> implicitInteger = <span class="number">70</span></div><div class="line"><span class="keyword">let</span> implicitDouble = <span class="number">70.0</span></div><div class="line"><span class="comment">// 自动类型推断会认定为Double类型，若要声明Float类型，需显示声明类型</span></div><div class="line"><span class="keyword">let</span> explicitDouble: <span class="type">Double</span> = <span class="number">70</span></div></pre></td></tr></table></figure>
<p>值永远不会被隐式转换为其他类型。如果你需要把一个值转换成其他类型，请显式转换。如下例子若去掉显示转换的String，则会编译报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> label = <span class="string">"The width is"</span></div><div class="line"><span class="keyword">let</span> width = <span class="number">94</span></div><div class="line"><span class="keyword">let</span> widthLabel = label + <span class="type">String</span>(width)</div></pre></td></tr></table></figure>
<p>有一种更简单的把值转换成字符串的方法：把值写到括号中，并且在括号之前写一个反斜杠。例如：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> apples = <span class="number">3</span></div><div class="line"><span class="keyword">let</span> oranges = <span class="number">5</span></div><div class="line"><span class="keyword">let</span> appleSummary = <span class="string">"I have \(apples) apples."</span></div><div class="line"><span class="keyword">let</span> fruitSummary = <span class="string">"I have \(apples + oranges) pieces of fruit."</span></div></pre></td></tr></table></figure>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>条件判断：<code>if-else</code> 和 <code>switch</code><br>循环：<code>for-in</code>、 <code>for</code>、 <code>while</code> 和 <code>do-while</code>  </p>
<blockquote>
<p>NOTE:<br>在Swift2.0中将<code>do-while</code>改为了<code>repeat-while</code>  </p>
</blockquote>
<p>条件语句的括号是可选的，执行语句主体写在花括号内</p>
<p>if判断条件必须是一个Bool表达式，因为值不能隐式转换类型，所以如<code>if condition { … }</code>这样的写法中若condition不是一个Bool类型都会报错</p>
<p>switch中的case语句若覆盖了所有情况，则可省略default语句；<br>匹配到任一条case语句执行后会直接跳出switch，不会继续执行后续case语句，所以不需要在每条case代码后加上break。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> vegetable = <span class="string">"red pepper"</span></div><div class="line"><span class="keyword">switch</span> vegetable &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"celery"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Add some raisins and make ants on a log."</span></div><div class="line"><span class="keyword">case</span> <span class="string">"cucumber"</span>, <span class="string">"watercress"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"That would make a good tea sandwich."</span></div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x.hasSuffix(<span class="string">"pepper"</span>):</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Is it a spicy \(x)?"</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Everything tastes good in soup."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h2><p>使用typealias关键字来定义类型别名。  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">AudioSample</span> = <span class="type">UInt16</span></div></pre></td></tr></table></figure>
<p>定义了一个类型别名之后，可以在任何使用原始名的地方使用别名。<br>下例中，AudioSample被定义为UInt16的一个别名。因为它是别名，AudioSample.min实际上是UInt16.min，所以会给maxAmplitudeFound赋一个初值0。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxAmplitudeFound = <span class="type">AudioSample</span>.<span class="built_in">min</span></div><div class="line"><span class="comment">// maxAmplitudeFound 现在是 0</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单值&quot;&gt;&lt;a href=&quot;#简单值&quot; class=&quot;headerlink&quot; title=&quot;简单值&quot;&gt;&lt;/a&gt;简单值&lt;/h2&gt;&lt;p&gt;在Swift文件中，全局作用域的代码会被自动当做程序的入口点，所以不需要main函数。&lt;br&gt;也不需要在每个语句结尾写上分号，除非在同一行内写多条独立的语句&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本类型&lt;/strong&gt;： &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Dictionary&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于Array和Dictionary:&lt;br&gt;不同于obj-C的NSAaary和NSDictionary，Swift的Array和Dictionary是基本类型而不是对象，但两者在大部分情况下是可直接互换的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;声明方式&lt;/strong&gt;&lt;br&gt;使用let来声明常量，使用var来声明变量。  &lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myVariable = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myVariable = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; myConstant = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://snowgan.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://snowgan.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://snowgan.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift KVO模式</title>
    <link href="http://snowgan.com/2015/06/25/Swift-KVO%E6%A8%A1%E5%BC%8F/"/>
    <id>http://snowgan.com/2015/06/25/Swift-KVO模式/</id>
    <published>2015-06-25T06:41:19.000Z</published>
    <updated>2015-06-25T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>KVO(Key-Value Observing)是一种观察者模式。继承自NSObject的对象可以注册监听任何属性的变化，并指定观察者对象。<br>注册监听属性的方法<code>addObserver:forKeyPath:options:context:</code></p>
<blockquote>
<p>注：被监听属性要用dynamic关键字修饰</p>
</blockquote>
<p>方法声明： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addObserver</span><span class="params">(<span class="number">_</span> anObserver: NSObject, //指定观察者对象</span></span></div><div class="line">           forKeyPath keyPath: String, //指定要监听的属性</div><div class="line">              options options: NSKeyValueObservingOptions, //监听选项，指定要包含在change字典里的数据</div><div class="line">              context context: UnsafeMutablePointer&lt;Void&gt; //要传递给观察者的数据，可以注册多个相同观察者，相同属性，不同context的监听事件</div><div class="line">)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其中options参数类型NSKeyValueObservingOptions是一个结构体，包含四个属性。<br>定义： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSKeyValueObservingOptions</span> : <span class="title">RawOptionSetType</span> </span>&#123;</div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> rawValue: <span class="type">UInt</span>)</div><div class="line">    <span class="keyword">init</span>(rawValue rawValue: <span class="type">UInt</span>)</div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">New</span>: <span class="type">NSKeyValueObservingOptions</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// change字典里包含新值</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Old</span>: <span class="type">NSKeyValueObservingOptions</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// change字典里包含旧值</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Initial</span>: <span class="type">NSKeyValueObservingOptions</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// 在注册监听的时候就会立即发送消息给观察者</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">Prior</span>: <span class="type">NSKeyValueObservingOptions</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// 在监听的属性变化前后各发送一次消息给观察者</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当监听的属性发生变化时，会向观察者发送<code>observeValueForKeyPath:ofObject:change:context:</code>消息，观察者可以重写该方法以实现自定义行为。<br>方法声明：  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">observeValueForKeyPath</span><span class="params">(<span class="number">_</span> keyPath: String,</span></span></div><div class="line">                      ofObject object: AnyObject,</div><div class="line">                        change change: [NSObject : AnyObject],</div><div class="line">                      context context: UnsafeMutablePointer&lt;Void&gt;)</div></pre></td></tr></table></figure>
<p>观察者被释放前需要取消监听，否则消息发送给一个已销毁的对象会造成程序崩溃<br>方法声明：  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeObserver</span><span class="params">(<span class="number">_</span> anObserver: NSObject,</span></span></div><div class="line">              forKeyPath keyPath: String)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeObserver</span><span class="params">(<span class="number">_</span> observer: NSObject,</span></span></div><div class="line">            forKeyPath keyPath: String,</div><div class="line">               context context: UnsafeMutablePointer&lt;Void&gt;)</div></pre></td></tr></table></figure>
<p>示例：当用户点击“Like”按钮，label的数字会相应加1，相当于一个点赞计数的功能  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(<span class="built_in">count</span>: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="built_in">count</span> = <span class="built_in">count</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> like = <span class="type">Like</span>(<span class="built_in">count</span>: <span class="number">0</span>)</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="comment">// 注册监听事件</span></div><div class="line">        like.addObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"count"</span>, options: <span class="literal">nil</span>, context: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">        setupLabel()</div><div class="line">        setupButton()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupLabel</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</div><div class="line">        label.bounds.size = <span class="type">CGSize</span>(width: <span class="number">20</span>, height: <span class="number">20</span>)</div><div class="line">        label.tag = <span class="number">1</span></div><div class="line">        label.backgroundColor = <span class="type">UIColor</span>.yellowColor()</div><div class="line">        label.text = <span class="string">"\(like.count)"</span></div><div class="line">        label.autoresizingMask = .<span class="type">FlexibleWidth</span></div><div class="line">        view.addSubview(label)</div><div class="line">        label.setTranslatesAutoresizingMaskIntoConstraints(<span class="literal">false</span>)</div><div class="line">        view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: label, attribute: .<span class="type">CenterX</span>, relatedBy: .<span class="type">Equal</span>, toItem: view, attribute: .<span class="type">CenterX</span>, multiplier: <span class="number">1</span>, constant: <span class="number">0</span>))</div><div class="line">        view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: label, attribute: .<span class="type">CenterY</span>, relatedBy: .<span class="type">Equal</span>, toItem: view, attribute: .<span class="type">CenterY</span>, multiplier: <span class="number">1</span>, constant: <span class="number">0</span>))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setupButton</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">let</span> button = <span class="type">UIButton</span>.buttonWithType(<span class="type">UIButtonType</span>.<span class="type">System</span>) <span class="keyword">as</span>! <span class="type">UIButton</span></div><div class="line">        button.tag = <span class="number">2</span></div><div class="line">        button.setTitle(<span class="string">"Like"</span>, forState: <span class="type">UIControlState</span>.<span class="type">Normal</span>)</div><div class="line">        view.addSubview(button)</div><div class="line">        button.setTranslatesAutoresizingMaskIntoConstraints(<span class="literal">false</span>)</div><div class="line">        view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: button, attribute: .<span class="type">Top</span>, relatedBy: .<span class="type">Equal</span>, toItem: view.viewWithTag(<span class="number">1</span>), attribute: .<span class="type">Bottom</span>, multiplier: <span class="number">1</span>, constant: <span class="number">10</span>))</div><div class="line">        view.addConstraint(<span class="type">NSLayoutConstraint</span>(item: button, attribute: .<span class="type">CenterX</span>, relatedBy: .<span class="type">Equal</span>, toItem: view, attribute: .<span class="type">CenterX</span>, multiplier: <span class="number">1</span>, constant: <span class="number">0</span>))</div><div class="line">        button.addTarget(<span class="keyword">self</span>, action: <span class="string">"buttonPressed"</span>, forControlEvents: <span class="type">UIControlEvents</span>.<span class="type">TouchUpInside</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buttonPressed</span><span class="params">()</span></span> &#123;</div><div class="line">        like.<span class="built_in">count</span>++</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">observeValueForKeyPath</span><span class="params">(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer&lt;Void&gt;)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> label = (view.viewWithTag(<span class="number">1</span>) <span class="keyword">as</span>? <span class="type">UILabel</span>) &#123;</div><div class="line">            label.text = <span class="string">"\(like.count)"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">deinit</span> &#123;</div><div class="line">        like.removeObserver(<span class="keyword">self</span>, forKeyPath: <span class="string">"count"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;KVO(Key-Value Observing)是一种观察者模式。继承自NSObject的对象可以注册监听任何属性的变化，并指定观察者对象。&lt;br&gt;注册监听属性的方法&lt;code&gt;addObserver:forKeyPath:options:context:&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：被监听属性要用dynamic关键字修饰&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;方法声明： &lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; anObserver: NSObject, //指定观察者对象&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           forKeyPath keyPath: String, //指定要监听的属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              options options: NSKeyValueObservingOptions, //监听选项，指定要包含在change字典里的数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;              context context: UnsafeMutablePointer&amp;lt;Void&amp;gt; //要传递给观察者的数据，可以注册多个相同观察者，相同属性，不同context的监听事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://snowgan.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="http://snowgan.com/tags/Swift/"/>
    
  </entry>
  
</feed>
